// Code generated by go-bindata.
// sources:
// templates/homepage.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHomepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x73\xdb\x36\xf6\x7d\xef\xa7\xb8\x83\x97\xdf\x4c\x66\x28\x5a\x8e\x7f\x69\xb3\x23\x33\x93\xc6\x4d\x9b\x26\x6b\x67\xe3\x38\xdd\xf6\xc5\x03\x91\x57\x24\x6a\x10\xc0\x02\xa0\x64\x45\xe3\xef\xbe\x03\x90\x94\x28\x8a\x54\xec\xd0\x4d\xdd\x6d\xfc\x62\x11\x7f\x0e\x2e\x2e\xce\x01\x2e\x2e\xf9\xcd\x24\x61\x73\x88\x39\x35\xe6\x98\x28\x9a\x62\xc0\x84\xd5\x12\xa6\x34\xbe\x4a\xb5\x2c\x44\x12\x04\xd4\x58\x4d\x39\x89\xbe\x01\x00\x68\xb6\x5f\x68\xaa\x14\xea\xaa\xa6\x5d\x1b\x4b\x1e\xb8\x16\x8d\xea\x9e\x66\x1d\x2d\x7c\xab\x6c\xbc\x6b\xd9\xe5\xa5\x65\x96\x23\x89\x7e\x41\x1e\xcb\x1c\xc1\x4a\xb0\x19\xc2\xd9\x6c\xc6\x62\x84\x99\xd4\x70\x4a\x2d\x93\x82\x72\x38\xb7\xd4\x32\x63\x59\x6c\x26\x61\x36\xee\x19\x44\x75\x8d\x11\x4b\x61\x51\x58\x12\xbd\xcf\x10\x2e\x5e\xff\x9f\x01\x4e\x75\x8a\xc6\x02\x13\x09\x2a\x14\x09\x0a\x0b\x4a\xcb\xa4\x88\x51\x83\x9c\x81\x74\xe3\x33\xca\xc1\xac\x07\x05\x2a\x12\x6f\x9b\xc6\x58\xa6\x82\x19\x4c\x40\xd4\xb6\xad\x9b\x51\x0e\x4c\x18\xcb\x6c\x61\xd1\x01\x59\x3f\xe2\x68\x12\xaa\x0e\xbf\x85\x09\x9b\x37\xbc\xbd\x79\xac\x7e\x56\xff\xb6\x56\xb5\xb9\x94\x29\xe5\x1c\xf5\x72\xef\x5a\x6e\xe0\xb3\xc3\xe8\x0d\xb5\x6e\xd6\xaa\x98\x72\x66\x32\x4c\x40\x23\x47\x6a\xd0\x79\xf4\xb0\x61\x49\xc1\x81\x25\xc7\xa4\xae\x0d\x38\x33\x96\xd4\xd8\xee\x21\x08\x04\x16\x8e\x47\x50\xf3\x02\x72\xaa\x53\x26\x02\x8e\x33\x1b\x04\x07\xf5\xe3\x54\x5a\x2b\xf3\x20\x38\x68\xb1\x62\xb5\xd2\x54\xa4\x08\xa3\x13\x6a\xe9\xe8\xad\x33\x28\xf6\xce\x34\x37\x37\x2d\x47\x4d\x38\x6b\xb0\xcb\x0f\x18\xf0\x34\x38\x7c\x5a\x5b\xdf\x1e\xeb\xb0\x2e\xd0\x2c\xcd\x6c\x10\x8c\xdb\xb6\x35\x7d\xb8\xc8\x98\x45\x50\x34\x49\x98\x48\x03\x2b\x95\x6b\x5f\x3f\xae\x01\xea\x82\x7a\x88\x4d\x49\x89\x39\xee\x24\xfd\x24\x7b\x5c\x5b\x5e\x99\xba\xe6\xfb\x84\x42\xa6\x71\x76\x4c\x56\x2b\x18\x5d\xbc\x7b\x75\x73\x43\x22\xf7\xf3\xbd\xab\xbe\xb9\x99\x84\x34\x9a\x84\xd9\xe3\x4e\x54\xb5\x03\xba\x26\xb8\x83\x78\x57\x96\x9e\x50\xeb\x81\x76\x88\x37\x09\x39\x6b\x2f\x06\x8a\xa4\xe1\xf7\x49\x58\xf0\x16\x73\x7e\x42\x9a\x70\x26\x10\x66\x2c\x2d\x74\x1f\x61\xb2\xaa\x55\x50\xb5\xba\x1b\x67\xf6\x52\xa4\x36\xe0\x65\x89\x7c\x5b\x96\x8c\x8f\x60\x6d\x54\x42\x2d\x7d\x28\xd4\x58\xad\xd8\x0c\x46\xe7\x8a\xea\x2b\x67\x9b\x9b\xe2\xce\x94\xaa\x89\x35\x64\xbd\x35\x95\xcb\x4b\x53\x77\x6f\xea\x7c\x5f\xff\x75\x07\xf8\xdd\x04\x81\xc9\xe4\x82\x80\x83\x0a\xd6\x15\x8e\x90\x95\xdb\x5b\xc6\xc1\x6a\x15\xc0\xe8\x57\xf0\xbf\x3c\x5f\x7a\x36\xfa\xfa\x6f\xdd\x1f\x32\xd4\xd8\x6f\x5f\xb5\xc9\xf5\xd5\xaf\x56\xe1\x23\x38\x3d\x83\x9f\xcf\xe1\x51\xd8\xe3\x23\x8f\x23\xa4\x89\x35\x53\x76\xbf\x55\x13\x96\xa7\x3b\xee\x08\x58\x4e\xd3\xd2\x29\x19\x4b\x90\x80\xd1\x71\x43\x9a\xe1\xba\xa1\x6f\xb7\x67\xde\x93\x70\xbf\x15\xfd\x93\x6d\x6b\xb0\xd1\x67\xb3\x8b\xb4\xd6\xff\x3e\xf7\x92\x16\x74\x29\xe0\xde\x99\x96\xf4\x2d\x8f\x93\x52\x91\xa3\xb7\x1a\x2f\x04\xb3\x37\x37\x6e\xe8\xee\x9a\x3d\x93\x2c\x41\x5b\x1d\xcb\x7f\x7b\xda\xef\x18\xd1\x63\x41\x5d\xdc\xeb\xe2\xae\xe3\xb9\xe9\x9d\x19\x2f\x4c\x76\x5f\xdb\x2b\xdc\x7d\xbb\xf2\x9b\xcf\x03\x39\xd7\x3e\x8b\x8f\x6f\xa4\xbc\x62\x22\x75\xf1\x5d\x22\x17\x82\x4b\x9a\x80\x65\x39\x82\x41\xcd\xd0\x3c\xeb\x27\xe9\xce\x22\xbc\xd7\x4b\x90\x85\x6e\x76\x07\xbc\x56\x5c\x6a\xd4\x3b\xeb\xb1\xbd\x1a\x1d\x07\xdb\x99\xcd\x50\xc3\xd9\xe9\xb9\x8f\xef\x3a\xe2\xbe\xee\x93\x4e\xba\x6e\xf7\x10\x17\x3d\x69\x39\xb8\xc5\x8b\x0c\xfd\x4a\x19\x17\xd5\x3c\xde\x66\x89\xaf\xc8\x13\x5f\x51\x3d\xf1\x34\x08\x8e\xbe\xeb\xa0\x41\x93\x45\x07\x3d\x16\xb5\x49\xb5\x8e\xa6\x3e\x11\xf1\xb7\x08\xd3\xcf\xb1\x8a\xc3\x6d\xca\x75\xe1\xb7\xc7\x98\xca\xeb\x75\x90\x03\xcd\x87\x20\xc8\x64\x8e\x2e\xd6\xdf\x1a\xc6\x39\x62\xfc\xed\x36\x97\x9d\x0f\xc7\x07\xdb\x65\xce\x7d\xe3\xff\x6f\x3a\x73\xfc\x74\xcb\x99\x47\xdb\xed\x5d\x59\x3b\x4c\xe9\x91\x86\x27\x48\x25\x89\x1d\xdb\x0e\x1b\x22\x09\x33\xe4\x2a\xe4\x32\xa6\x7c\x43\xba\x8d\x60\xdc\x15\xc8\x57\x36\x28\xf9\x6c\x62\x14\x15\xf5\x48\xfe\x4c\x0a\x32\xc9\x13\xd4\xb0\x60\x89\xcd\xfc\x5c\x9f\x56\xbf\xfd\xac\xc6\xd5\x83\x77\x8c\x1b\xdd\x9d\x82\xfe\x90\x1b\x8d\xc2\xd1\x28\x64\x79\x1a\xda\x71\xe0\x07\x1a\x29\x91\x12\xa0\xdc\x1e\x93\x35\xb7\x85\x0c\xa6\x52\x27\xee\x46\x31\x71\xa7\xa1\x88\xb6\x4c\x28\x97\x84\xb3\xf8\x8a\x4e\xfd\x0e\x50\xb5\xd9\x73\xf2\xb4\xc5\xdd\xa0\xa8\x37\x92\x44\xcf\x21\xa3\x22\x59\x42\x5a\xb0\xc4\x5f\x0c\x39\x5a\x58\xca\x02\xae\x84\x5c\xc0\xc2\x05\x15\xae\x74\xc6\x44\xb2\xe3\xa1\xee\x0b\x17\xec\x5e\xba\xf6\x14\xef\x6e\xe4\xb7\x12\xe7\x51\x5b\x9c\xbd\x72\xac\x05\xb8\x47\xa3\xff\x2b\xa2\xbc\x93\x02\xef\x2e\xb0\xa6\x9c\x62\x14\xa6\x30\x24\x7a\xe1\xff\xdf\x13\x4d\xef\xaa\xb7\xc7\xbd\x12\x2b\xcd\x0b\xb8\x4c\x65\x43\x68\xa5\xb1\xe0\x4a\xf7\x68\xee\x16\x32\xb2\x8c\xa3\x69\x5c\x08\x4f\x98\x89\xe5\x1c\x35\x64\x72\xe1\x4f\xcd\x72\xfc\x66\x5e\xc3\xed\x3f\xa0\x28\x13\x16\x28\x28\x16\xdb\x42\xaf\x53\x17\x65\x82\xc3\x1f\x8d\x0e\x60\x81\xc0\xd9\x1c\xbf\xaa\xeb\xef\xaa\xae\xcc\x5a\xf5\x8f\x30\x9c\x33\x53\x50\x3e\x92\xc2\x8c\x52\x39\x1f\x15\x57\x04\x2c\xd5\x29\xda\x63\x72\x39\xe5\x54\x5c\x91\xe8\x43\xd9\xe4\xec\xf4\xfc\xc1\x49\xb0\xb4\x3e\x70\xd6\x6f\x14\xf8\xc3\x35\xcd\x15\xf7\xc4\x67\xc2\xa2\xa6\xb1\x65\x73\xf4\xb7\x63\x28\x3b\x30\xe3\xc5\xb0\xab\xcf\x6a\x54\x5a\x58\x59\xbb\x3a\x38\x7c\x32\x44\xb5\x1b\xe7\x01\x33\x40\x61\x81\x53\xe3\x58\x5c\x86\xb9\x2e\x2c\x10\xb8\x00\xaa\x94\x96\x34\xce\xd0\xb8\x73\x30\xa7\x3e\x5e\x70\x7d\x9a\x49\xcb\x38\x46\x63\xd8\x94\xa3\x17\xb1\x46\x8e\x73\x2a\xac\xeb\x40\x9d\xdd\x58\x26\x03\x63\xa0\x45\xc2\x50\xc4\x5f\x46\xdb\x5e\xcd\x79\x12\x1c\x7d\xdb\x4c\xe7\x35\x14\x7f\xf4\xdd\x6d\x65\xfe\x67\x69\xb8\x3b\xad\x73\x67\x0d\x0f\x3b\xeb\x30\x96\x42\xe6\xcb\x90\x89\x19\x2f\x53\xd1\x22\x51\x9a\xc5\xc8\x44\xc2\x62\x34\xe1\xb4\xe0\x1c\x2d\x13\x26\x8c\xa5\x30\x45\x8e\xba\xaa\xae\xda\x87\xdc\x5f\x93\x49\x74\xe2\x78\x7e\x1e\x7b\x0a\xc0\x0b\x9a\xab\x7b\x3b\x3a\xbb\x22\x3c\x2f\xd0\x4f\xa4\x8f\xbe\x2f\x18\x77\x1e\x87\x85\xd4\x3c\x09\x38\x52\xff\x84\xd7\x0a\xb5\x65\x06\x81\x09\x7f\x44\x31\x21\xe4\x9c\x7a\xb1\x52\xa5\xea\x34\xb2\xd3\xb1\xd7\xae\x89\xbf\x3c\xad\x3b\xaf\x6a\xd5\x41\xb6\xd9\x21\xbe\x92\xba\x9b\xd4\x0a\xa5\xe2\xa8\xa4\x2a\xd6\x9c\x8e\x65\x9e\x17\x82\xd9\x65\xb8\x55\x9c\xb3\x54\x97\x34\xde\x14\xa3\xb1\x2c\x77\xa4\x6e\x70\x9f\x0a\x51\x50\x9e\xb3\x64\x89\x54\x77\x35\xad\x55\xf0\x23\xca\x54\x53\x95\x2d\xab\x97\x41\xf6\x0f\x17\x01\xb4\xee\x3d\x07\x7e\xf3\x67\xd6\xc7\x6a\x52\xa1\x80\x74\x63\x93\xd4\x96\x72\x70\x17\x42\x26\xae\x30\xa9\x08\xce\x2c\x7e\x99\xfb\xce\x57\x7a\xff\xd5\xe9\x7d\xf6\x61\x74\xf1\xfa\x4f\xa0\x74\x99\x64\xeb\x7a\xa9\x5a\xbd\x74\x4d\x80\xe5\x8a\x6a\xcb\x28\xe7\x4b\x1f\xa9\xcc\x34\x22\xcc\xb4\xcc\x41\x49\xce\xea\x37\xab\x33\x5e\xfc\x31\xbb\x79\x2b\x33\xb8\x5a\x85\x8f\xb6\xf3\x84\x2f\x91\xba\x8b\x51\x02\x15\x1d\xba\xd3\x82\xb3\xaa\xd5\x67\x64\x06\xf7\x27\x02\x1b\x61\xd2\x03\x78\xdb\xb9\x51\xf9\x51\x77\x82\xb8\x33\x07\x7c\xf1\x1a\xde\xa2\x36\x0a\x7d\x68\x6d\xe0\xf0\x60\xfc\xa4\x9b\x68\xb7\xdb\x8a\xca\xfd\xe7\x2f\xeb\x8e\x93\x46\x78\x02\x71\x19\x72\xfd\x7d\xbd\xf1\xaa\xf1\x25\x86\xc6\x39\xc3\x85\x0b\xe1\x2e\x5e\x43\x19\xe3\xb2\x78\x2b\x25\xff\x69\x37\xf5\xa6\xfa\xef\x98\xe2\x77\xad\x3e\xe7\x03\x88\xbd\x2f\xb3\xbd\x25\x77\x78\x85\xfd\xe0\x57\xb5\x7f\x5d\x6f\xf1\x22\xf2\xb6\x1f\x24\xd4\x4f\xeb\xd7\xc0\xdb\x9f\xc9\xf4\x7d\x25\x73\x97\x0f\x9e\xb2\xc3\xe8\xb9\xbb\x1b\xff\xe6\xc8\xd7\xfc\xa8\x67\x7d\xda\xee\x72\xa5\x42\xa3\xc1\x47\x4f\x93\xf6\x62\xb5\xdd\xd5\x58\xe5\xba\x4b\xc0\x2c\xe6\xcd\x18\x81\x5a\xf9\xf1\x19\xfd\x78\x4c\x49\xf4\xbc\xf4\xda\x9e\x1d\xe0\x93\x28\x53\x12\x7d\x3f\x1c\x25\x26\xd1\x8b\xe1\x28\x09\x89\x4e\x86\xa3\x20\x89\x7e\x18\x8e\x32\x23\xd1\xcb\xe1\x28\x29\x89\x7e\x1c\x8e\x92\x91\xe8\xa7\xe1\x28\x8c\x44\xaf\x86\xa3\xfc\x4e\xa2\x9f\x87\xa3\x5c\x91\xe8\xf5\x70\x14\x4e\xa2\x37\xc3\x51\x72\x12\xfd\x73\x38\x8a\x20\xd1\xe9\x70\x14\x49\xa2\xb3\xe1\x28\x8a\x44\x6f\x87\xa3\xfc\x87\x44\xff\x1a\x8e\xa2\x49\xf4\x6e\x38\x8a\x21\xd1\xf9\x70\x14\x4b\xa2\xf7\xc3\x51\x0a\x12\x5d\x0c\x47\x99\x93\xe8\xc3\x70\x94\x05\x89\x7e\x19\x8e\x72\x4d\xa2\x7f\x0f\x47\x59\x92\xe8\xd7\xe1\x28\x1f\x49\xf4\xdb\x2e\xca\xe6\x8c\xdf\x3e\xd6\xff\x1b\x00\x00\xff\xff\x81\x7a\xfa\x4d\xd4\x2c\x00\x00")

func templatesHomepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomepageTmpl,
		"templates/homepage.tmpl",
	)
}

func templatesHomepageTmpl() (*asset, error) {
	bytes, err := templatesHomepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/homepage.tmpl", size: 11476, mode: os.FileMode(420), modTime: time.Unix(1476885946, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x96\xdf\x6f\xdb\x36\x10\xc7\xdf\xfb\x57\x5c\x15\x14\xdd\x62\x51\x3f\x9c\x2a\x89\x3d\x2b\xc0\x96\x3a\x83\x31\x14\x2d\xb0\x0e\x2b\x50\x14\x05\x2d\x9e\x2c\x22\x94\xa8\x91\xe7\xb8\xa9\xa0\xff\x7d\xa0\x24\x3b\x8e\x9b\x64\x0f\xdd\xa6\x27\x92\x47\xde\x7d\xbe\x27\xdd\x89\xb3\x82\x4a\x75\xf1\x6c\x56\x20\x17\x17\xcf\x00\x00\x66\x24\x49\xe1\x45\xd3\x40\xf0\x06\x89\x0b\x4e\x3c\x78\xef\x96\xa0\x6d\x67\x61\x6f\xec\x37\x96\x48\x1c\x2a\x5e\x62\xea\x09\xb4\x99\x91\x35\x49\x5d\x79\x90\xe9\x8a\xb0\xa2\xd4\xbb\xe7\xe3\xf5\xdd\x96\xb6\xf5\xbe\x75\x71\x8d\xb7\x1b\x6d\x84\xbd\x77\xde\xf0\x6a\x85\x7b\x4e\x7e\x1b\x36\xb5\x2d\x34\x0d\x83\xa0\x6d\x7d\x68\x1a\xac\xc4\x81\xcb\x82\xa8\x66\xf8\xd7\x5a\xde\xa4\xde\x07\xf6\xc7\xcf\xec\x52\x97\x35\x27\xb9\x54\xb8\xe7\x7f\x31\x4f\x51\xac\xd0\xcf\x0a\xa3\x4b\x4c\x63\x0f\xc2\x7d\x27\x59\xc1\x8d\x45\x4a\xbd\x35\xe5\xec\xdc\xbb\x6f\xdb\xfa\xd8\x48\x41\x45\x2a\xf0\x46\x66\xc8\xba\x89\x2f\x2b\x49\x92\x2b\x66\x33\xae\x30\x8d\x83\xc8\x5f\x5b\x34\xdd\x94\x2f\x55\x17\xa7\x97\x7c\x23\x71\x53\x6b\x43\x0f\x64\x23\xd7\xa6\xe4\xc4\x04\x12\x66\x07\x59\x25\x54\x58\x17\xba\xc2\xb4\xd2\x0f\x9c\xa4\x02\x4b\x64\x99\x56\xda\xec\x1d\x3a\x4a\xce\x93\x49\xf2\xcb\x03\xfb\x79\x5d\x2b\x64\xa5\x5e\x4a\x85\x6c\x83\x4b\xc6\xeb\x9a\x59\xe2\xb4\xb6\x6c\xc9\x0d\xb3\x74\x7b\x2f\x69\x07\x9e\x9e\x33\x06\xef\xf8\x0a\xc1\xa0\xd5\x6b\x93\xa1\x05\xc6\x06\x9b\x92\xd5\x35\x14\x06\xf3\xd4\x73\x2f\x64\x1a\x86\xf1\xf8\x2c\x88\x82\x28\x88\xa7\x93\x28\x8a\x42\x21\x2d\x85\x99\xb5\x61\xc9\x65\x15\x64\xd6\x7a\x60\x50\xa5\x5e\x17\xd3\x16\x88\xe4\x01\xdd\xd6\x4e\x15\x7e\xe9\x76\x7a\x17\xcf\x3a\xdf\x4d\x13\x1e\xef\x00\x3e\xca\x1c\x16\xf3\x4f\x17\xb3\xe7\x1f\xb1\x12\x32\xff\xb4\x23\x18\x8c\x8a\x10\x16\x73\x38\xff\xb4\x0f\xf6\x4d\xa4\x9e\xb4\x69\x8e\x64\x0e\xd2\x7e\x16\x78\xd3\xb6\x03\x77\xd3\x28\x9d\x71\xf7\x22\x82\x42\x5b\x72\x99\x6b\xdb\x03\x0d\x5a\x09\x26\xd1\xa9\x68\x1a\x54\x16\xdb\x36\xe4\xd6\x22\xd9\x6f\xac\xa1\xcc\xdb\x76\xf7\x3d\x3d\x06\xbd\x98\xc3\xe4\x69\xe0\x83\xd4\x7c\xaf\x00\x89\x6c\xf2\x18\xfe\x9d\xad\x87\xff\x07\xf6\x15\x0d\xf8\x6e\xe1\xff\xd4\xb0\xfd\x90\x1e\xd2\x70\x67\xdb\xd7\xd0\x87\xaa\x45\xfe\xb9\xc3\x6a\xdb\xef\x07\x75\x98\xca\x21\x1e\xc0\xd5\x22\x7f\x8c\x6d\x67\x1a\xd0\x86\xc1\xc3\x59\x3e\x0e\xdb\xb6\x2f\x83\x59\x47\xd8\xaf\xba\x67\xa9\xc5\x2d\x34\xbb\xa9\x7b\xc2\x63\x78\x87\xa6\xe4\x9d\x2a\x06\x6b\x8b\x40\x1a\x50\x48\x02\x5e\x09\xb0\x05\x37\x08\x54\x48\x0b\x2b\xc3\x85\xc4\x8a\xa6\x30\xe8\xe8\x9a\xc8\x57\xa9\x14\x0f\x32\x5d\x86\x5b\x3b\x73\x87\xb5\x09\x8f\x10\xf3\xfc\x24\x19\x45\x7e\x1e\x9f\xe6\x49\x36\x4a\x22\x3f\x3f\x1d\x4f\xa2\x6c\x94\xc4\x7e\x7c\x92\xc5\xaf\x5e\x8d\xce\xc6\x3e\x9e\x9d\x9c\x8f\xcf\x46\x71\x14\xc1\x71\x78\x8f\x6d\xc9\xb3\xeb\x95\xd1\xeb\x4a\x4c\x61\xf0\xf6\x93\x03\x7e\xab\x04\x2c\x8d\xde\x58\x34\xf6\xa9\x33\xac\xd4\x5f\x99\x92\x15\x72\xc3\xb6\x74\x3f\xb0\x57\x89\xc0\x95\xbf\x75\x08\xd1\x0b\x1f\x8e\x7a\x42\x48\xfa\x49\x07\x09\x49\xec\x26\x3d\x27\x9c\x8d\xdd\xa4\x47\x85\x38\x8a\x5e\xfc\xd8\x91\x5c\x5d\x9d\x04\xa7\x2c\x4e\x9e\xa4\xd8\xe0\xf2\x5a\xd2\x7f\x0b\x72\xd9\xfd\xa3\xe2\x88\x8d\x13\xff\x77\x9e\x73\x23\x93\x20\x66\xa7\x4f\x71\x1d\xf2\xc4\x27\xff\x22\xcf\x9f\x27\x97\x3e\x2c\xe6\x71\x34\xf2\xe1\xea\x2a\x3e\x1d\xf9\x03\xe2\xd8\x0d\xdf\xd6\x68\x78\x3c\x1e\xf9\xd0\xb3\x9e\x8d\x0e\x41\x73\xa9\x08\xcd\x14\x6a\xa3\x57\x52\x4c\x5f\x7f\x58\x94\x7c\x85\xef\x0d\xaf\xac\xfb\xf7\x05\x6f\x64\x66\xb4\xd5\x39\x05\x3b\x7e\x4b\xdc\xd0\xa5\xfb\x26\x2d\x99\xf4\xe5\x20\xe3\xa5\x0f\x58\x89\xfd\xe5\x0e\xf5\xa5\x0f\xbf\x0e\x07\xdf\xbb\xca\x8d\x7b\xec\xc5\xfc\x94\x4d\x20\xe7\x4a\xb9\x4c\x81\xae\xa0\xd0\x46\x7e\xd5\x15\x71\xb5\x2b\x80\x7d\xd6\xa1\x04\xc3\xa1\xd0\x66\x61\x7f\x53\x9a\x75\x95\x96\x29\x6e\x6d\x7f\xcf\x71\x41\xa0\x6b\x2a\x43\x57\x01\xc2\xb2\x56\x9c\x10\xbc\x9a\x1b\x77\x21\xb0\xdd\x59\x34\x1e\x04\xb0\x2d\xe0\xcb\xb5\x31\x2e\xe2\x76\xf3\x14\x9a\x26\xeb\xd7\x76\x35\xee\xfa\x16\x48\x91\x7a\x6e\xe0\x81\xd1\x0a\xb7\x63\xe2\x4b\x59\x09\xfc\x92\x7a\x2c\xf6\xee\xda\x40\xd3\xdc\x4a\x54\x62\xdb\x3f\xba\xce\xf7\x24\x58\xae\x35\x39\x30\x17\x73\x16\x3a\x6d\x9d\xd4\xee\x6e\xf8\x77\x00\x00\x00\xff\xff\x0d\xaf\xff\x38\x23\x0a\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 2595, mode: os.FileMode(420), modTime: time.Unix(1476874077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\x9e\x2b\x33\xd8\x00\x3d\x14\xb2\x80\x20\x68\xb6\x8b\x06\xc9\x21\x5b\xf4\x68\x8c\xc9\x91\x34\x35\x35\x14\xc8\x91\x14\xf7\xeb\x0b\x5a\xf1\x3a\xad\xbd\xe8\xc6\xd9\xf6\x62\xcb\x33\x7c\x6f\xc6\x7c\x8f\x43\x95\x75\x08\x82\x51\x59\x0f\x29\xad\x74\x1f\x89\xa5\x28\x5a\x72\xa8\xab\x45\xd9\x7e\x38\x24\x46\x4a\x03\x78\xbf\x6b\xc9\x39\x64\x5d\xdd\xcd\x30\x4f\xbc\x4d\xa5\x69\x3f\x54\x8b\xd2\xd1\x78\x58\x3d\x93\xea\xbf\x07\xa7\x08\x7d\x3f\x47\x19\xc6\x73\x80\x82\x61\x54\x36\xf8\x22\x2f\xfd\x07\xda\x06\xbf\x4f\x15\xbe\x29\x02\x63\x21\x2d\x45\x37\x47\x3a\x77\x8c\xec\xbb\xbe\x3e\xa5\x5d\xaf\x5b\x04\x47\xdc\xe8\xea\x17\xf4\x7d\x69\xda\xeb\x6a\x51\x0e\xfe\xdc\x4a\x4f\x49\x32\x8f\xa7\x73\x59\x12\xec\x72\x16\x54\x1b\xb1\x5e\x69\xd3\xa2\xef\x0d\x58\x8b\x29\xd1\x86\x3c\xc9\x4e\x57\x37\xaf\x7f\x96\x06\xaa\x45\x69\x3c\xbd\x91\xd3\x86\xb0\x25\x4c\xc0\xae\x8f\x34\x82\xdd\xe9\xea\x76\x0e\x29\x60\xa7\x5e\x82\x97\xb2\x0b\xc6\x2e\x73\xdb\xc0\x8e\x84\x02\x27\x5d\x7d\xce\xb1\x3d\xf9\x31\xfa\x9a\xdf\x0c\x3e\x7f\x3a\x1a\xff\x2b\x71\x6e\x36\x61\x10\xf5\xf8\xf0\xf4\x3d\x15\x82\x4c\x3a\x24\x33\xb5\x20\x13\xba\xa0\xab\xdf\x5b\x10\x35\xa1\x72\xe1\x82\xed\x3b\xd0\x59\x88\x88\x31\xe9\xea\x76\x7e\x78\x0f\x55\x60\x01\x2b\x43\x26\x9b\x1f\xd5\x70\x09\x1f\xe3\x94\x74\xf5\x80\xd3\x7b\x9a\x91\x08\x9c\x7a\x88\xc8\x76\x07\xec\x9a\x30\x62\x64\x60\x8b\xa6\x8e\x88\x2e\x74\xa1\x26\xae\x43\xec\x20\x1b\xa4\x0e\xa4\xab\xbb\x39\xa1\x42\xad\x3e\x1d\x53\xff\xaf\x75\x6e\x03\x33\x5a\x51\x13\x49\xbb\xdf\xbd\xef\x66\xa0\x56\xa4\x4f\x3f\x19\x23\x13\x89\x60\x5c\xda\xd0\x99\xc7\x87\x27\x7d\xc0\x92\x0d\xfc\x32\x34\x95\x40\x6c\x50\x56\x7a\xbd\xf1\xc0\x5b\x5d\x7d\x9e\x31\x6f\x97\xe3\x50\x74\x9a\xa6\x65\x0d\x16\x37\x21\x6c\xdf\x54\xf9\xee\x05\xf4\xbe\xd2\x79\xc2\xa3\x23\xde\x97\xb6\xa1\xeb\x81\x77\x26\xd4\x35\x59\x2c\xea\x90\x09\xb2\xd2\xe0\x8b\x24\x20\x94\x84\x6c\xfa\xa6\xee\xee\xf7\xbc\x9f\xf8\xf2\xee\xfa\x61\xe3\xc9\x2e\x9b\x30\x3a\xf4\x34\x62\xdc\xed\x7b\x04\x6b\xc3\xc0\x92\xcc\x6f\xbf\x3e\x3e\x3c\x99\x34\x6c\x92\x8d\xb4\xc1\x98\xf2\xe9\xf8\xa6\xde\x7e\xee\x80\xbc\x02\x8f\x51\xbe\x3e\xfe\x0e\x5f\xf3\x5d\x76\x6a\xec\x57\xd7\xdd\xe9\x45\xe7\xc9\x22\xa7\xfd\x1d\x4b\x5d\x73\x3e\xb9\x5e\x53\xd7\x68\x05\x5e\x56\xfa\xf1\xe3\xbd\x56\x13\x39\x69\x57\xfa\xc7\x2b\xad\x52\xb4\x2b\x6d\xa8\x6b\x4c\x68\xfc\xb2\xcf\xf6\x5f\x94\xfd\xd7\x78\x04\x9f\x45\x75\x10\x1b\xe2\xc2\x63\x2d\x45\xea\x8a\xe2\x4a\x57\x8b\x1b\x9f\x0f\x1f\x0b\xb2\x28\x4a\x0a\x46\x20\x0f\x1b\x8f\x6a\x60\x87\x51\x49\x8b\xaa\x84\x73\x3b\x76\x54\xe2\xc5\x26\x07\x1b\x40\xb4\x2d\x8d\x98\xb2\x2c\xcb\x61\x6b\x5c\xb0\x26\xf4\xc8\xc5\x3c\x45\x3a\x64\x99\xfb\xb2\x68\x46\x8c\x89\x02\x9b\x6b\x73\x2a\xc1\x63\x8f\xac\x3e\x7e\xc1\xa8\xfb\x19\xa3\xc6\xeb\xe5\x55\x96\x44\x95\xa9\x07\x7e\xdd\x9a\xda\xf7\x87\xcf\x92\x87\x55\x9e\x27\xd4\xb4\xf9\x9f\x82\xf7\xba\x2a\x4d\x5e\x5e\xfd\xa0\xf0\xd9\x62\x2f\x6a\x6a\x31\xa2\x0a\xd2\x62\x9c\x28\xa1\xca\xe6\x45\xb7\x28\x4d\x7f\x2a\xf0\x51\x59\x72\xf9\x45\x08\xa7\x3e\xc4\xcc\xfc\xc5\x4b\x7f\xa4\xe2\x18\xa6\x3f\x31\xd7\xcb\xa8\x53\x50\xe7\x2e\x00\xf9\xe6\xdf\x41\x66\xd6\xbc\x5a\xfc\x15\x00\x00\xff\xff\xc2\xab\x14\xfd\xd1\x09\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2513, mode: os.FileMode(420), modTime: time.Unix(1476772645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\xdd\x6f\xdb\x36\x10\x7f\xcf\x5f\x71\x63\x80\xa2\x2d\x40\x2b\x69\xbb\xcf\xca\x1e\xb6\xf4\x61\x05\xd6\x75\x68\xb2\x87\x3d\x19\xb4\x78\x96\x58\x53\xa4\x46\x52\x4e\x0c\x23\xff\xfb\x40\x7d\x5b\x96\x64\x07\xeb\xc3\x9a\x87\xc0\x22\x8f\x77\xbf\xfb\x3e\x32\x4c\x90\x71\x34\x8b\x8b\x0b\x00\x80\x90\x41\x24\x99\xb5\x73\x62\x37\x22\x93\x42\x6d\x08\x24\x06\xd7\x73\x72\x99\x32\xa1\x08\x38\xb6\x12\x8a\xe3\xc3\x9c\x5c\x91\xc5\xed\x46\x64\xe0\x34\xf8\x2d\x88\xb4\x72\xa8\x5c\x18\xb0\x45\xc9\x8a\x8b\x2d\x08\x3e\x27\x19\x8b\xf1\x4f\xe6\x12\x52\xb3\x4e\x04\x47\xb2\xd8\xef\x67\x7f\x7d\x7a\xff\xf8\x18\x06\x5c\x6c\x2b\xf1\xfb\xbd\x58\xc3\xec\x16\xcd\x56\x44\xf8\x01\xad\x65\x31\x3e\x3e\x16\x5b\x0d\xcb\x8a\xc9\x0a\x1d\xa3\x2b\xa6\x14\x1a\xb2\x68\x28\xfa\x54\xf7\x86\x65\xd9\x11\x45\x41\x95\x79\x04\x7d\x51\x61\x90\xf5\x98\x95\xe8\x06\x3e\xf7\x7b\x54\xfc\xf1\xf1\xe2\xe2\xb4\xcc\xee\x6e\x69\x6e\x88\xb4\xa4\x9e\x70\x02\x7b\xa4\x65\x41\x46\x65\x4c\xb5\x42\xea\x12\x61\x78\xb9\x92\xf2\x76\x65\x48\x37\x56\x39\x2d\x18\xd8\x2c\x08\x44\x1a\xd7\x62\xbc\xf3\xa8\xd4\xb1\x26\x60\x4d\x34\x27\x01\xb3\x16\x9d\x0d\x44\x1a\x07\x5a\xd9\x62\x6b\x66\xb7\x31\x01\x26\xdd\x9c\x7c\x5c\xaf\x45\x84\xb0\xd6\x06\xfe\x60\x4e\x68\xc5\x24\xdc\x3a\xe6\x84\x75\x22\xb2\x43\x60\xea\x80\x18\x31\xe9\x94\xda\xee\x5e\x97\x4a\xda\x46\xef\xce\x92\x8f\x23\x4a\x6d\x0a\x99\x11\xca\x51\x5a\xc6\xd5\x31\x00\x2e\x6b\xde\x92\xa9\x38\x67\xf1\x10\x55\x49\xe9\xfa\x94\xcb\xa5\x13\x4e\x22\x59\xdc\x24\x4c\xc5\x08\xf5\xfa\x4f\x61\xc0\xdd\x18\x17\x7e\xcc\x45\x38\x4c\x47\xa4\x42\x11\x4c\xc1\x4b\xb8\xfb\xf8\xee\x23\x50\x60\x9c\xc3\xef\x4c\xc5\x20\x94\xd3\xe0\xb3\x07\x52\xcd\x51\x02\x53\x1c\x38\x3a\x8c\x1c\x08\x07\x09\x1a\xf4\xc9\x67\x13\x7d\xef\x5d\x83\x46\x31\x27\xb6\x2d\x44\x78\x19\x74\x72\xe7\x08\x65\x13\x23\x41\xb4\x9b\x69\x65\x67\xb1\xde\xce\xf2\x4d\x9d\x96\x64\x71\xb3\x4b\x0d\xc3\x18\x9e\xdf\xfc\xfd\xe2\xc8\x89\x07\xac\xbe\xa1\xb4\x61\xf7\xec\xf2\xfa\xea\x6d\xef\x9f\x27\xea\x89\x09\xc8\xb1\x8d\x7c\xb9\x01\x11\x69\xf5\xec\xf2\xcd\xb7\x6f\x8b\x7f\xa5\x4b\xfb\x48\x28\x1d\xb1\x7c\xc0\xf9\x50\x00\x72\xf9\xa4\x08\xb4\x18\x69\xc5\x99\xd9\x51\xc5\xb6\x70\x7e\x3c\x9e\x08\xc3\x5c\x0e\x0a\xf0\x7a\x5b\x07\x9f\xad\xff\xa0\x91\xd4\x0a\xcb\xa5\xb1\x20\x95\x62\x84\xcf\x89\x18\xeb\xd4\xf6\xbe\x7c\xb5\x81\x23\x00\x6d\xe9\x0f\x0c\x4a\x64\x16\x23\x26\xd1\x1f\x23\x8b\x4f\xe5\x02\xd4\x2b\xa3\xe1\x11\x06\x52\xfc\x6f\xd4\x48\xd1\x25\x9a\x6b\xa9\xe3\x1d\x59\x7c\x68\x3f\xbe\x0e\xf4\x0a\xef\xad\x87\xcd\x05\xfb\x3a\x00\xb3\x95\xce\x5d\x6e\xc9\xe2\x17\xff\xe3\x89\x98\xc3\x20\x9f\x4e\xda\xce\x67\xf7\x67\x27\x8d\x33\x23\xd2\x3a\x89\x87\x53\x33\x54\xac\x5f\x06\xda\x24\xf5\x6a\x51\x3f\xd4\x18\x2d\x07\xfb\x5a\x6b\xd1\x03\xd2\x49\x8b\x36\x65\xf2\xd2\x9f\xa9\x10\x92\x62\x4c\x4a\x51\xe5\xd4\xe9\x38\x96\x48\x80\x19\xc1\x1a\x8e\xa5\x80\x86\x78\x58\xa8\x3f\x3e\xe5\x46\x9b\x31\x35\x72\xd4\xe1\x83\xf3\x91\xa5\xf2\x30\xf0\x64\x63\x7e\x1a\x70\xe0\x88\xf3\x26\x4d\x03\x67\xd9\xc6\x22\x33\x51\x52\x9a\xa6\xfc\x3d\x65\x9c\x9a\x7a\x58\x6a\xb5\xfb\x5f\xac\x73\x5b\xb0\xf8\x02\xf6\x19\x08\xec\xe3\xd9\x11\x3c\x86\x62\x30\xf3\x21\xcb\x51\x95\x76\x38\x08\x83\xc2\x0a\xf8\x90\x31\xc5\x91\xcf\xc9\x9a\x49\x7b\xa2\xed\x74\x12\xe2\xdc\x0e\x73\x70\xa4\x70\xde\xd1\x0a\xa5\x2c\x2a\xe6\x8e\xb2\x14\xb4\x53\x99\x96\x9c\x0a\xa4\x94\x0b\x9b\x49\xb6\xa3\x2b\xa9\xa3\x0d\x59\xb4\x05\xa5\x87\x47\x6d\xda\x5e\x9b\x72\xfa\x7d\xd3\x75\x7f\x24\xed\x38\xfb\x9b\x4e\xd1\x5b\x7a\xbc\xd2\xed\xf7\xa6\x98\xd4\x66\x77\xec\x41\x2b\x9d\xee\xa6\x86\xa0\x29\x4d\x2b\x7d\x3e\xdb\xca\xca\x6c\x25\xc7\x06\xc7\x86\x5f\x1d\xc2\xcd\x14\x75\x9e\xae\x3f\x34\xba\x5e\x5f\x55\x9e\x4d\x98\xcd\x74\x96\x67\x73\xe2\x4c\x5e\x5e\x97\xee\xfc\x24\xea\xef\x28\x13\xb3\x18\x34\xb7\xa8\x9b\x44\x48\x6e\x50\x4d\xa8\xdf\xc0\x1e\x89\x91\xc8\xb3\xa0\xc5\x78\xd2\x45\x7b\xfd\x5d\x03\xf7\xd5\xd5\xa1\x7d\x96\xcb\xea\x1a\x58\x37\x86\x3a\x7c\x07\xa3\xb5\x5c\x95\x6c\x85\x72\x4e\x6c\xbe\x3a\x51\xc3\x0e\x75\xac\xbc\xfc\x04\x35\x1b\x75\x47\xbc\x5e\xaa\x5b\xf8\xfe\x48\x2b\xbf\x75\x26\xb4\x46\xcc\x79\xc1\x50\x1b\xd9\x77\xce\xf6\x76\x4d\xaf\x9f\xe4\xf2\x03\xb9\xa3\xa9\xd1\xff\xab\xaf\xb0\xa7\x39\xf6\x6b\xd6\x53\x39\x4d\xa5\xeb\xf8\xc9\xc9\xf4\xac\x22\xec\xac\xd1\xe5\x38\xfb\x26\xd2\xaf\xaa\x35\x36\x37\x5b\xdc\x0d\x75\xfe\xee\xdf\x1d\xdb\x08\x15\x43\xc6\x8c\x03\xa1\x80\x41\x79\xec\xe7\x09\x4b\x7c\xe9\x39\xa8\x19\x62\x46\xe6\xa0\xb2\xfb\x41\xdb\x26\xeb\xa6\x72\x30\x15\x75\x1a\xed\xaf\x6c\xec\xf1\xa2\x7e\xda\x00\xa3\x25\xd6\xe4\xfd\x27\x8c\xb5\x36\x69\xe7\x32\x5f\x3c\x73\x40\x49\xba\x5c\xfa\x4d\x02\xbe\x63\x68\xe5\x8d\x3c\xd6\x99\xc3\xa2\x2a\x1c\xaa\xb0\x5c\x56\x8b\x1d\xd7\xbd\x7a\xdd\xd6\xa2\x37\x04\xd6\xda\x1c\x0c\x04\x55\xdf\x2e\x9e\x2b\x18\x6c\x70\x77\xaf\x0d\x7f\x6e\x5f\x80\x36\xe0\x44\x8a\x83\x9e\xb0\x68\x04\x5a\x78\xff\x2e\x0c\x0a\x81\x03\xe8\x84\xca\x72\x07\x6e\x97\xb5\x56\x00\x96\x3b\x1d\xe9\x34\x93\xe8\x70\x4e\xf4\x7a\x4d\xfa\xf0\xcb\x53\x07\xf0\xaf\x1b\xf8\xaf\x5f\xb5\x4d\xbe\x62\x39\x16\x44\x8a\xa5\x38\x27\xff\x10\xd8\x32\x99\xe3\x9c\x0c\xd9\x6f\x95\x3b\xa7\x55\x0d\x31\x5f\xa5\xc2\x1d\xe1\xa9\x68\x6a\x30\xad\x29\x5f\xf7\xa1\xd0\x8a\xc3\x48\xe8\x76\xc7\xa7\xad\xb0\x39\x93\x72\x57\x55\xfe\x73\x26\xa7\xee\x71\x7f\xff\x2f\x1e\x01\x9a\x60\x95\x22\x4e\x1c\x59\x8c\x71\x08\x83\x52\x8d\x7e\x96\xf8\x48\x9b\xba\x2e\x84\x41\xfd\xf2\xf9\x6f\x00\x00\x00\xff\xff\x10\x44\xf1\x85\x03\x15\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 5379, mode: os.FileMode(420), modTime: time.Unix(1476858717, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/homepage.tmpl": templatesHomepageTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"homepage.tmpl": &bintree{templatesHomepageTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

