// +build production
// Code generated by go-bindata.
// sources:
// templates/dd/dataset.tmpl
// templates/dd/datasetList.tmpl
// templates/dd/disabled.tmpl
// templates/dd/splash.tmpl
// templates/error.tmpl
// templates/homepage.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// templates/productPage.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDdDatasetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\xcf\x4a\xc3\x40\x10\x06\xf0\xfb\x3e\xc5\xc7\x9e\x25\xb9\x6b\x12\xd8\xa8\xa0\xa5\x60\x88\xf6\x1c\xa6\xd9\x55\xb7\x48\x3b\x64\xc6\x45\x09\xfb\xee\x52\x83\x07\x21\xe8\x75\xf8\xcd\x37\x7f\x2a\x1f\x13\xa2\xaf\x2d\x31\xdb\xa6\x2a\x7d\x4c\x8d\xa9\x64\x9c\x22\x2b\xf4\x93\x43\x6d\x35\x7c\x68\x79\xa0\x44\x4b\xd5\x36\x06\x48\x34\x81\x98\xaf\x4f\xc7\xe7\xf8\x82\x1a\xb3\x01\x00\xd7\xdd\x0f\xbb\x7e\x7b\x89\x79\x46\x71\x43\x4a\x12\xb4\x58\x4c\xe1\x38\xee\xfa\x6d\xce\x17\xdf\x72\xf3\xd0\x0e\x7f\xe9\xcd\x69\x2f\xbf\x3b\x5a\xf7\x78\x3b\x74\xee\xe9\x6e\xd5\xb7\x24\xa1\x23\x7d\xcd\xd9\x00\xf9\xca\x54\xe5\xb2\xec\x7f\xb7\x40\xa6\xb1\xb6\x2b\x81\x7d\xa0\x51\x1d\xb3\x13\x09\x2a\xe7\x68\xe4\x5c\xee\xdf\x8f\xfe\x2d\x14\x07\x39\xbf\xea\x67\xc2\x57\x00\x00\x00\xff\xff\x88\xd8\x59\x21\x43\x01\x00\x00")

func templatesDdDatasetTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDdDatasetTmpl,
		"templates/dd/dataset.tmpl",
	)
}

func templatesDdDatasetTmpl() (*asset, error) {
	bytes, err := templatesDdDatasetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dd/dataset.tmpl", size: 323, mode: os.FileMode(420), modTime: time.Unix(1488467027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDdDatasetlistTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xbd\x6a\xc3\x30\x10\xc7\xf7\x3c\xc5\xd5\x53\x3b\xc8\x6e\x32\x16\x45\x50\xf0\x52\x68\x97\x92\xd2\xf9\x62\x5f\xec\xa3\x17\x29\x48\xb2\x4b\x30\x7a\xf7\x22\xc7\x2e\x99\xc4\xe9\x7e\xf7\xff\xd0\x2d\x8f\xd0\x08\x86\xb0\x2f\x8e\xd8\xfc\x74\xde\x0d\xb6\x55\xaa\x43\x11\xf2\xd7\xc2\x6c\x00\xee\x99\x5f\x8f\x97\x0b\xf9\xf9\x1f\x40\xf7\x5b\xf3\x4d\xd2\xb8\x33\x41\x74\x50\x63\x44\xa8\x39\x34\x6e\x24\x7f\x7d\xd0\x55\xbf\x35\x9b\x05\xdc\x99\xd7\x11\x59\xf0\x28\x04\x2d\x46\x0c\x14\x03\x3c\x4e\x13\x94\xf5\x32\x95\x07\x17\x51\x20\xa5\xa7\x17\x5d\xf5\xbb\xf5\x72\x90\xd5\x5b\x38\x44\xa5\x2c\x0d\xd1\xa3\x40\xe3\x44\xe5\x34\x70\x46\xdf\xb1\x55\x42\xa7\xa8\xd4\xf3\x92\x6c\x9a\xc0\xa3\xed\xe8\x4e\xfe\x2d\xd2\x39\x40\x4a\xf3\x7e\x96\x16\x36\x1a\xa1\xf7\x74\xda\x17\x39\xc9\xd7\xe7\x3b\xa4\x54\xac\x7e\xdc\x38\xab\x54\xcf\x2d\x15\x10\x39\x0a\xcd\x14\x9f\xa0\xfc\xa0\x88\xb9\x04\xa4\x94\xef\xd6\xb1\xac\x29\x34\x9e\x2f\x91\x9d\xbd\xad\xc8\xb6\x59\xd1\x64\xea\x90\x25\x20\x25\x5d\xa1\xd1\x95\xf0\x7f\xd0\x1b\x74\x6b\x5b\x0d\x32\x17\xd7\x55\xcb\xa3\xd9\x2c\xcf\x5f\x00\x00\x00\xff\xff\xb2\x2a\xb0\x0c\xa6\x01\x00\x00")

func templatesDdDatasetlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDdDatasetlistTmpl,
		"templates/dd/datasetList.tmpl",
	)
}

func templatesDdDatasetlistTmpl() (*asset, error) {
	bytes, err := templatesDdDatasetlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dd/datasetList.tmpl", size: 422, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDdDisabledTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xc1\x6e\xea\x40\x0c\xbc\xf3\x15\x16\x77\x3f\xc4\x3d\x8f\x5b\xef\x3d\xf4\x8e\x9c\xd8\x61\x57\x38\xbb\x2b\xaf\x13\xe0\xef\x2b\x28\x45\xa4\x50\x7a\x8a\xc7\x99\x99\x1d\x69\xdc\x70\x9c\xa0\x53\xaa\xf5\xff\xb2\xd0\x4e\x30\x08\xb1\x18\x54\x25\x97\xe5\x66\x01\x70\xcf\x38\x18\x95\x22\x76\xd9\x03\x34\x61\xfd\x44\xba\xdd\x7a\x74\x15\xe8\x75\xac\x01\x31\x90\xf6\x88\x6d\x76\xcf\xc3\x72\xf3\x96\xa6\x68\x39\x0d\x92\x1c\x5c\x86\x92\x8d\x2c\xea\x09\xc6\x44\x13\x45\xa5\x56\xa5\x59\x85\xf5\xe5\xdd\x15\xc7\x69\xb3\xb8\x7e\x16\x4f\x62\x40\xa1\x24\x8a\x38\x90\x3d\x24\xdd\x59\x64\x3c\xf3\xbe\xb3\xfe\xfc\xd7\x65\x05\x96\xba\xf7\x5c\xf0\xb2\xe8\x47\x55\x3c\x44\xf6\x70\x95\xcc\x45\x6d\x3e\x42\x9b\x8f\x88\x85\x98\x85\xbf\x66\x13\x46\x26\xdb\xcf\x11\x62\x95\x42\x46\x2e\x8c\x2a\xbd\x43\x95\xce\x63\x4e\xc2\x37\xe7\xd7\x61\x7f\x61\x3c\x44\xf6\x43\x46\x0f\xd1\xb8\xce\x84\x00\x4d\x99\x63\x80\x8f\x10\x2b\xb8\x54\x07\xb9\xab\x20\x56\xe8\x46\x33\x49\x3e\xef\xe0\xdf\xdc\x6d\x55\xfe\xb2\x7f\x57\xa1\x2a\xe0\x76\x02\xda\x51\x4c\x70\x3e\x1f\x7b\x69\x73\x2d\xf6\x29\xbc\x03\xb7\x71\x7e\x0f\x9f\x01\x00\x00\xff\xff\x3a\xf0\xde\x62\xb8\x02\x00\x00")

func templatesDdDisabledTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDdDisabledTmpl,
		"templates/dd/disabled.tmpl",
	)
}

func templatesDdDisabledTmpl() (*asset, error) {
	bytes, err := templatesDdDisabledTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dd/disabled.tmpl", size: 696, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDdSplashTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4d\x6e\xdb\x3c\x10\xdd\xe7\x14\x03\xae\xbe\x0f\x28\xed\xa6\x0d\xd0\x22\xb0\x0d\xa4\x89\x17\x05\x8a\x24\x68\x16\x41\x57\xc1\x48\x1a\x49\x03\xf3\x0f\xe4\xc8\xae\x77\xbd\x43\x6f\xd8\x93\x14\x54\x62\x37\xb6\xe5\x24\x5c\x91\xf3\xc7\xc7\x79\x6f\x38\xa9\x78\x09\xa5\xc1\x94\xa6\x2a\x60\x43\x9a\x9d\x44\x0f\x05\x96\x8b\x26\xfa\xce\x55\x5a\x37\x68\x0c\xc5\xb5\x9a\x9d\x40\xbf\x9e\xa7\xac\x22\x86\x40\x71\xeb\xdb\xf7\x97\xde\xe8\x1c\xb3\x13\x30\x10\x74\xe0\x1f\x88\x81\x5c\x4c\xdb\x4a\x9f\x7d\x7a\xdc\x9a\x46\x9f\x7d\x1e\xcc\xec\xb3\xdb\xd3\xc3\x87\x3d\x3c\x08\x8b\x21\xb0\x18\x1b\x76\x5a\x7c\xd0\xfa\xe3\xd1\x12\x79\x5d\xa1\x20\x5c\x71\x2a\xfd\x92\xe2\xfa\x1c\xe6\x3f\x03\x45\xb6\xe4\x04\x0d\xdc\x46\x2f\x5e\xd6\x81\x8e\x61\x18\xb7\xa7\x47\xf1\x85\x21\x78\xa5\x77\x42\x4e\x5e\x84\x74\x4f\xa6\xf4\x96\x40\x3c\xa0\x03\x7a\x0e\x28\x6c\x00\xc1\x7f\x68\x42\x8b\xff\x43\xed\x23\x74\xa1\x42\xa1\x94\x13\xa4\x25\xb8\xa9\x6b\x2e\xa9\xf7\x5c\xa3\xb0\x77\x68\xe0\x4e\x50\x38\x09\x97\x09\x56\x54\x24\x16\x1a\x1d\x7d\x53\x18\x24\x6b\x5c\xf1\xf2\x80\xe5\x7d\xe3\x8e\x61\x7b\x78\xda\x9c\xbc\xac\xad\x57\x75\xb5\xaf\x97\x27\x92\x0b\x2f\xe2\xad\xd6\x67\x87\x22\xdc\x52\xb0\x17\xfa\x5e\xcd\x26\x49\xa2\x77\xcd\xec\xf6\xdb\xfc\xe2\x6e\x0e\x5f\xe6\x70\x71\x7f\xf1\x7d\x3e\x19\x3f\xd9\xe1\xcf\xaf\xdf\x20\x2d\x27\xe0\x04\x08\x42\x49\xb6\x9d\x83\xaf\x02\x16\xd7\x90\xc9\x44\x76\xc0\x0e\xcb\xb2\x8b\x58\x32\x25\xf0\x11\x0a\x02\xcb\xc9\x10\x56\xec\x9a\xd1\x40\x43\xff\x01\xab\x4d\x97\x5a\x35\x9b\x20\xb4\x91\xea\xa9\x6a\x45\x42\x3a\x1f\x8f\x57\xab\xd5\xc8\xbb\x34\x6a\xfc\x72\xd4\x2d\xd4\x6c\xf7\x3c\x19\xe3\x0c\x22\x59\x64\x97\x7a\xca\x7d\xa6\x9c\xd1\x6c\x20\xf6\xe4\xdf\x5c\xdf\x01\xbb\xda\x47\xdb\xab\xe0\x4d\x40\x7e\xf8\x2e\x42\xea\x9a\x86\x52\xce\x49\xb0\x62\x63\xa0\x25\x13\xa0\x4b\x60\x71\x41\x8f\x4d\xe9\x2f\x29\x48\x84\xe2\x3b\x48\x1e\xb8\x86\xb5\xef\xa0\xc5\x25\x01\xba\xdc\x1a\x9b\x25\x9b\x20\x18\xc2\x44\x90\xc8\x55\xb9\x42\x4d\x54\xe5\xcf\x67\x10\x4c\x86\xba\xc7\x58\x3f\xc1\x1f\x14\x58\x92\xd6\x57\x53\x15\x7c\x1a\x1e\x9e\x49\xd1\x89\x78\x07\x79\x38\xa6\x2a\x75\x85\x65\x51\xe0\xd0\x52\x16\x8b\xab\x39\x5a\x05\x4b\x34\x1d\x4d\xd5\x5a\x6d\x6e\x29\xc4\x41\x21\x4e\xeb\x10\xd9\x62\xfe\x04\x2f\xbd\x13\x76\x1d\x4d\xc6\x8f\x05\x0f\x25\x9f\x51\x1e\x58\x5f\xe1\x6f\x73\x1f\x3b\xc3\x8e\x74\x61\x7c\xb9\x80\x02\x13\xe5\xe3\xce\x6f\x75\xaa\x66\x97\xe8\x4a\x32\x99\xe3\xb7\x4e\xd6\xdf\x00\x00\x00\xff\xff\x57\xcc\x8b\x7b\xe6\x05\x00\x00")

func templatesDdSplashTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDdSplashTmpl,
		"templates/dd/splash.tmpl",
	)
}

func templatesDdSplashTmpl() (*asset, error) {
	bytes, err := templatesDdSplashTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dd/splash.tmpl", size: 1510, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\xbe\x3b\xd5\x5e\x51\x1a\x21\x01\x12\x48\x70\x5b\xc4\x71\x35\xb1\x27\xb5\x55\xc7\x63\x79\x26\xe9\x56\x4b\xfe\x1d\xa5\xb0\x2c\xad\x7a\xe2\xf4\xc6\xcf\x6f\x34\xe3\xf7\xdc\xf9\xb8\x80\x4b\x28\xb2\x37\x05\x0f\x64\x03\xa1\xa7\x0a\x92\x50\xc9\xf4\xcd\xbf\xf7\xa7\x8a\xa5\x50\xdd\xd8\xf0\x70\xa7\xe9\xe9\x49\xa3\x26\x82\x31\xcd\x12\xac\x0d\x98\x46\x6b\x07\x56\xe5\xc9\xf4\x2f\x2f\xd0\x7e\xaa\x95\x6b\xfb\x78\x11\xad\x6b\xb7\x0b\x0f\x7d\xd3\xed\x7c\x5c\xfa\xe6\x15\xef\xcc\x83\x82\x99\x92\xb5\x13\xd6\x9b\x85\x0e\x35\x7a\xbb\xa9\xee\xf1\x8e\x13\x78\x92\xa3\x72\xb1\x17\x62\x9c\x53\xb2\xa7\xe8\x35\x6c\x72\xac\x1a\x5d\xa2\xeb\xc6\x81\x9f\x61\xe0\x67\x6b\x0b\x7a\x4f\xfe\x77\x5d\xc9\x5b\x8f\xf5\x78\x7d\xb2\x56\xa8\x60\x45\x25\x6f\x13\x8d\x0a\x42\x4e\x23\x67\xf2\x66\x7b\xcd\x7f\x6f\xa9\x27\xb6\x1a\x62\xf5\x62\xfa\xe6\xcd\xb4\x8f\x24\xae\xc6\xb2\x4d\x80\x9f\x20\x38\xd2\xe7\xc7\x6f\x5f\x61\x5d\x9b\xae\xf4\x5f\x46\x38\xf3\x0c\xa2\x31\x25\xa0\xec\x78\xce\xba\xf9\x56\x79\x48\x34\x09\x94\x44\x28\x04\x1d\x42\xa8\x34\xee\xcd\x84\x31\x29\xbf\x3b\xd1\xd0\x3a\x9e\x26\xca\x2a\xef\x39\x4b\x7b\xe0\xa5\x9d\x8f\x06\x2e\x31\xee\xcd\x07\xce\x8a\x4e\xe1\xbb\x98\xde\xfd\xa9\x67\xe9\x76\xd8\xb7\xf0\x83\x00\x0b\x27\x3e\x44\x21\x18\xb9\x02\xe6\x33\xc4\xec\x38\x2f\x94\x23\x65\x47\xa0\x21\x0a\x4c\x78\x86\x80\x0b\x81\xc3\x59\xc8\xb7\xdd\xae\xfc\xcd\xfc\x16\xde\x22\xb9\xfe\x13\xaf\xf8\x2b\x00\x00\xff\xff\x38\x7a\x05\x98\xac\x02\x00\x00")

func templatesErrorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorTmpl,
		"templates/error.tmpl",
	)
}

func templatesErrorTmpl() (*asset, error) {
	bytes, err := templatesErrorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1487779720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x73\xdb\x36\xf6\x7d\xef\xa7\xb8\x83\x97\xdf\x4c\x66\x28\x5a\x8e\x7f\x69\xb3\x23\x33\x93\xc6\x4d\x9b\x26\x6b\x67\xe3\x38\xdd\xf6\xc5\x03\x91\x57\x24\x6a\x10\xc0\x02\xa0\x64\x45\xe3\xef\xbe\x03\x90\x94\x28\x8a\x54\xec\xd0\x4d\xdd\x6d\xfc\x62\x11\x7f\x0e\x2e\x2e\xce\xc1\xbd\x00\xf9\xcd\x24\x61\x73\x88\x39\x35\xe6\x98\x28\x9a\x62\xc0\x84\xd5\x12\xa6\x34\xbe\x4a\xb5\x2c\x44\x12\x04\xd4\x58\x4d\x39\x89\xbe\x01\x00\x68\xb6\x5f\x68\xaa\x14\xea\xaa\xa6\x5d\x1b\x4b\x1e\xb8\x16\x8d\xea\x9e\x66\x1d\x2d\x7c\xab\x6c\xbc\x6b\xd9\xe5\xa5\x65\x96\x23\x89\x7e\x41\x1e\xcb\x1c\xc1\x4a\xb0\x19\xc2\xd9\x6c\xc6\x62\x84\x99\xd4\x70\x4a\x2d\x93\x82\x72\x38\xb7\xd4\x32\x63\x59\x6c\x26\x61\x36\xee\x19\x44\x75\x8d\x11\x4b\x61\x51\x58\x12\xbd\xcf\x10\x2e\x5e\xff\x9f\x01\x4e\x75\x8a\xc6\x02\x13\x09\x2a\x14\x09\x0a\x0b\x4a\xcb\xa4\x88\x51\x83\x9c\x81\x74\xe3\x33\xca\xc1\xac\x07\x05\x2a\x12\x6f\x9b\xc6\x58\xa6\x82\x19\x4c\x40\xd4\xb6\xad\x9b\x51\x0e\x4c\x18\xcb\x6c\x61\xd1\x01\x59\x3f\xe2\x68\x12\xaa\x0e\xbf\x85\x09\x9b\x37\xbc\xbd\x79\xac\x7e\x56\xff\xb6\x56\xb5\xb9\x94\x29\xe5\x1c\xf5\x72\xef\x5a\x6e\xe0\xb3\xc3\xe8\x0d\xb5\x6e\xd6\xaa\x98\x72\x66\x32\x4c\x40\x23\x47\x6a\xd0\x79\xf4\xb0\x61\x49\xc1\x81\x25\xc7\xa4\xae\x0d\x38\x33\x96\xd4\xd8\xee\x21\x08\x04\x16\x8e\x47\x50\xf3\x02\x72\xaa\x53\x26\x02\x8e\x33\x1b\x04\x07\xf5\xe3\x54\x5a\x2b\xf3\x20\x38\x68\xb1\x62\xb5\xd2\x54\xa4\x08\xa3\x13\x6a\xe9\xe8\x5d\x35\xd0\xcd\x4d\xcb\x49\x13\xce\x1a\xcc\xf2\x83\x05\x3c\x0d\x0e\x9f\xd6\x96\xb7\xc7\x39\xac\x0b\x34\x4b\x33\x1b\x04\xe3\xb6\x5d\x4d\xff\x2d\x32\x66\x11\x14\x4d\x12\x26\xd2\xc0\x4a\xe5\xda\xd7\x8f\x6b\x80\xba\xa0\x1e\x62\x53\x52\x62\x8e\x3b\x09\x3f\xc9\x1e\xd7\x96\x57\xa6\xae\xb9\x3e\xa1\x90\x69\x9c\x1d\x93\xd5\x0a\x46\x17\xef\x5e\xdd\xdc\x90\xc8\xfd\x7c\xef\xaa\x6f\x6e\x26\x21\x8d\x26\x61\xf6\xb8\x13\x55\xed\x80\xae\xc9\xed\x20\x2a\x47\x9e\x50\xeb\x81\x76\x48\x37\x09\x39\x6b\x2f\x04\x8a\xa4\xe1\xf7\x49\x58\xf0\x16\x6b\x7e\x42\x9a\x70\x26\x10\x66\x2c\x2d\x74\x1f\x59\xb2\xaa\x55\x50\xb5\xba\x1b\x5f\xf6\xd2\xa3\x36\xe0\x65\x89\x7c\x5b\x96\x8c\x8f\x60\x6d\x54\x42\x2d\x7d\x28\xd4\x58\xad\xd8\x0c\x46\xe7\x8a\xea\x2b\x67\x9b\x9b\xe2\xce\x94\xaa\x89\x35\x24\xbd\x35\x95\xcb\x4b\x53\x77\x6f\x6a\x7c\x5f\xff\x75\x07\xf8\xdd\x04\x81\xc9\xe4\x82\x80\x83\x0a\xd6\x15\x8e\x90\x95\xdb\x5b\xc6\xc1\x6a\x15\xc0\xe8\x57\xf0\xbf\x3c\x5f\x7a\x36\xf9\xfa\x6f\xdd\x1f\x32\xd4\xd8\x6f\x5f\xb5\xc1\xf5\xd5\xaf\x56\xe1\x23\x38\x3d\x83\x9f\xcf\xe1\x51\xd8\xe3\x23\x8f\x23\xa4\x89\x35\x53\x76\xbf\x55\x13\x96\xa7\x3b\xee\x08\x58\x4e\xd3\xd2\x29\x19\x4b\x90\x80\xd1\x71\x43\x9a\xe1\xba\xa1\x6f\xb7\x67\xde\x93\x70\xbf\x15\xfd\x93\x6d\x6b\xb0\xd1\x67\xb3\x8b\xb4\xd6\xff\x3e\xf7\x92\x16\x74\x29\xe0\xde\x99\x96\xf4\x2d\x43\x49\xa9\xc8\xd1\x5b\x8d\x17\x82\xd9\x9b\x1b\x37\x74\x77\xcd\x9e\x49\x96\xa0\xad\x8e\xe5\xbf\x3d\xed\x77\x8c\xe8\xb1\xa0\x2e\xee\x75\x71\x57\x68\x6e\x7a\x67\xc6\x0b\x93\xdd\xd7\xf6\x0a\x77\xdf\xae\xfc\xe6\xf3\x40\xe2\xda\x67\xf1\xf1\x8d\x94\x57\x4c\xa4\x2e\xb7\x4b\xe4\x42\x70\x49\x13\xb0\x2c\x47\x30\xa8\x19\x9a\x67\xfd\x24\xdd\x59\x84\xf7\x7a\x09\xb2\xd0\xcd\xee\x80\xd7\x8a\x4b\x8d\x7a\x67\x3d\xb6\x57\xa3\x23\xb0\x9d\xd9\x0c\x35\x9c\x9d\x9e\xfb\xdc\xae\x23\xe7\xeb\x8e\x74\xd2\x75\xbb\x87\x9c\xe8\x49\xcb\xc1\x2d\x5e\x64\xe8\x57\xca\xb8\xac\xe6\xf1\x36\x4b\x7c\x45\x9e\xf8\x8a\xea\x89\xa7\x41\x70\xf4\x5d\x07\x0d\x9a\x2c\x3a\xe8\xb1\xa8\x4d\xaa\x75\x36\xf5\x89\x6c\xbf\x45\x98\x7e\x8e\x55\x1c\x6e\x53\xae\x0b\xbf\x3d\xc6\x54\x5e\xaf\x93\x1c\x68\x3e\x04\x41\x26\x73\x74\x79\xfe\xd6\x30\xce\x11\xe3\x6f\xb7\xb9\xec\x7c\x38\x3e\xd8\x2e\x73\xee\x1b\xff\x7f\xd3\x99\xe3\xa7\x5b\xce\x3c\xda\x6e\xef\xca\xda\x69\x4a\x8f\x34\x3c\x41\x2a\x49\xec\xd8\x76\xd8\x10\x49\x98\x21\x57\x21\x97\x31\xe5\x1b\xd2\x6d\x04\xe3\x8e\x3f\xbe\xb2\x41\xc9\x67\x13\xa3\xa8\xa8\x47\xf2\x31\x29\xc8\x24\x4f\x50\xc3\x82\x25\x36\xf3\x73\x7d\x5a\xfd\xf6\xb3\x1a\x57\x0f\xde\x31\x6e\x74\x17\x05\x7d\x90\x1b\x8d\xc2\xd1\x28\x64\x79\x1a\xda\x71\xe0\x07\x1a\x29\x91\x12\xa0\xdc\x1e\x93\x35\xb7\x85\x0c\xa6\x52\x27\xee\x34\x31\x71\xd1\x50\x44\x5b\x26\x94\x4b\xc2\x59\x7c\x45\xa7\x7e\x07\xa8\xda\xec\x89\x3c\x6d\x71\x37\x28\xea\x8d\x24\xd1\x73\xc8\xa8\x48\x96\x90\x16\x2c\xf1\x87\x42\x8e\x16\x96\xb2\x80\x2b\x21\x17\xb0\x70\x49\x85\x2b\x9d\x31\x91\xec\x78\xa8\xfb\xb0\x05\xbb\x07\xae\x3d\xc5\xbb\x1b\xf9\xad\xc4\x79\xd4\x16\x67\xaf\x1c\x6b\x01\xee\xd1\xe8\xff\x8a\x28\xef\xa4\xc0\xbb\x0b\xac\x29\xa7\x18\x85\x29\x0c\x89\x5e\xf8\xff\xf7\x44\xd3\xbb\xea\xed\x71\xaf\xc4\x4a\xf3\x02\x2e\x53\xd9\x10\x5a\x69\x2c\xb8\xd2\x3d\x9a\xbb\x85\x8c\x2c\xe3\x68\x1a\x07\xc2\x13\x66\x62\x39\x47\x0d\x99\x5c\xf8\xa8\x59\x8e\xdf\xbc\xd3\x70\xfb\x0f\x28\xca\x84\x05\x0a\x8a\xc5\xb6\xd0\xeb\x6b\x8b\xf2\x72\xc3\x87\x46\x07\xb0\x40\xe0\x6c\x8e\x5f\xd5\xf5\x77\x55\x57\x66\xad\xfa\x47\x18\xce\x99\x29\x28\x1f\x49\x61\x46\xa9\x9c\x8f\x8a\x2b\x02\x96\xea\x14\xed\x31\xb9\x9c\x72\x2a\xae\x48\xf4\xa1\x6c\x72\x76\x7a\xfe\xe0\x24\x58\x5a\x1f\x38\xeb\x37\x0a\xfc\xe1\x9a\xe6\x8a\x7b\xe2\x33\x61\x51\xd3\xd8\xb2\x39\xfa\xd3\x31\x94\x1d\x98\xf1\x62\xd8\xd5\x67\x35\x2a\x2d\xac\xac\x5d\x1d\x1c\x3e\x19\xa2\xda\x8d\xf3\x80\x19\xa0\xb0\xc0\xa9\x71\x2c\x2e\xd3\x5c\x97\x16\x08\x5c\x00\x55\x4a\x4b\x1a\x67\x68\x5c\x1c\xcc\xa9\xcf\x17\x5c\x9f\xe6\x85\x65\x1c\xa3\x31\x6c\xca\xd1\x8b\x58\x23\xc7\x39\x15\xd6\x75\xa0\xce\x6e\x2c\x2f\x02\x63\xa0\x45\xc2\x50\xc4\x5f\x46\xdb\x5e\xcd\x79\x12\x1c\x7d\xdb\xbc\xce\x6b\x28\xfe\xe8\xbb\xdb\xca\xfc\xcf\xd2\x70\xf7\xb5\xce\x9d\x35\x3c\x2c\xd6\x61\x2c\x85\xcc\x97\x21\x13\x33\x5e\x5e\x43\x8b\x44\x69\x16\x23\x13\x09\x8b\xd1\x84\xd3\x82\x73\xb4\x4c\x98\x30\x96\xc2\x14\x39\xea\xaa\xba\x6a\x1f\x72\x7f\x4c\x26\xd1\x89\xe3\xf9\x79\xec\x29\x00\x2f\x68\xae\xee\x2d\x74\x76\x65\x78\x5e\xa0\x9f\xb8\x3e\xfa\xbe\x60\xdc\x79\x1c\x16\x52\xf3\x24\xe0\x48\xfd\x13\x5e\x2b\xd4\x96\x19\x04\x26\x7c\x88\x62\x42\xc8\x39\xf5\x62\xa5\x4a\x71\x16\x97\x21\x4b\xce\x4a\xed\x9a\xf8\xcb\xd3\xba\xf3\xa8\x56\x05\xb2\xcd\x0e\xf1\x95\xd4\xdd\xa4\x56\x28\x15\x47\x25\x55\xb1\xe6\x74\x2c\xf3\xbc\x10\xcc\x2e\xc3\xad\xe2\x9c\xa5\xba\xa4\xf1\xa6\x18\x8d\x65\xb9\x23\x75\x83\xfb\x54\x88\x82\xf2\x9c\x25\x4b\xa4\xba\xab\x69\xad\x82\x1f\x51\xa6\x9a\xaa\x6c\x59\xbd\x08\xb2\x7f\xb8\x08\xa0\x75\xee\x39\xf0\x9b\x3f\xb3\x3e\x57\x93\x0a\x05\xa4\x1b\x9b\xa4\xb6\x94\x83\x3b\x10\x32\x71\x85\x49\x45\x70\x66\xf1\xcb\x9c\x77\xbe\xd2\xfb\xaf\x4e\xef\xb3\x0f\xa3\x8b\xd7\x7f\x02\xa5\xcb\x4b\xb6\xae\x17\xaa\xd5\x0b\xd7\x04\x58\xae\xa8\xb6\x8c\x72\xbe\xf4\x99\xca\x4c\x23\xc2\x4c\xcb\x1c\x94\xe4\xac\x7e\xab\x3a\xe3\xc5\x1f\xb3\x9b\xb7\x6e\x06\x57\xab\xf0\xd1\xf6\x3d\xe1\x4b\xa4\xee\x60\x94\x40\x45\x87\xee\x6b\xc1\x59\xd5\xea\x33\x6e\x06\xf7\x5f\x04\x36\xd2\xa4\x07\xf0\xb6\x73\xa3\xf2\xa3\xee\x0b\xe2\xce\x3b\xe0\x8b\xd7\xf0\x16\xb5\x51\xe8\x53\x6b\x03\x87\x07\xe3\x27\xdd\x44\xbb\xdd\x56\x54\xee\x3f\x7f\x59\x77\x9c\x34\xd2\x13\x88\xcb\x94\xeb\xef\xeb\x8d\x57\x8d\xaf\x30\x34\xce\x19\x2e\x5c\x0a\x77\xf1\x1a\xca\x1c\x97\xc5\x5b\x57\xf2\x9f\x76\x53\xef\x55\xff\x1d\xaf\xf8\x5d\xab\xcf\xf9\xf8\x61\xef\xcb\x6c\x6f\xc9\x1d\x5e\x61\x3f\xf8\x55\xed\x5f\xd7\x5b\xbc\x88\xbc\xed\x07\x09\xf5\xd3\xfa\x35\xf0\xf6\x27\x32\x7d\x5f\xc8\xdc\xe5\x63\xa7\xec\x30\x7a\xee\xce\xc6\xbf\x39\xf2\x35\x3f\xe8\x59\x47\xdb\x5d\xae\x54\x68\x34\xf8\xe8\x69\xd2\x5e\xac\xb6\xbb\x1a\xab\x5c\x77\x09\x98\xc5\xbc\x99\x23\x50\x2b\x3f\x3e\xa3\x1f\x8f\x29\x89\x9e\x97\x5e\xdb\xb3\x03\x7c\x12\x65\x4a\xa2\xef\x87\xa3\xc4\x24\x7a\x31\x1c\x25\x21\xd1\xc9\x70\x14\x24\xd1\x0f\xc3\x51\x66\x24\x7a\x39\x1c\x25\x25\xd1\x8f\xc3\x51\x32\x12\xfd\x34\x1c\x85\x91\xe8\xd5\x70\x94\xdf\x49\xf4\xf3\x70\x94\x2b\x12\xbd\x1e\x8e\xc2\x49\xf4\x66\x38\x4a\x4e\xa2\x7f\x0e\x47\x11\x24\x3a\x1d\x8e\x22\x49\x74\x36\x1c\x45\x91\xe8\xed\x70\x94\xff\x90\xe8\x5f\xc3\x51\x34\x89\xde\x0d\x47\x31\x24\x3a\x1f\x8e\x62\x49\xf4\x7e\x38\x4a\x41\xa2\x8b\xe1\x28\x73\x12\x7d\x18\x8e\xb2\x20\xd1\x2f\xc3\x51\xae\x49\xf4\xef\xe1\x28\x4b\x12\xfd\x3a\x1c\xe5\x23\x89\x7e\xdb\x45\xd9\xc4\xf8\xed\xb0\xfe\xdf\x00\x00\x00\xff\xff\xfb\x0f\xef\xf8\xd0\x2c\x00\x00")

func templatesHomepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomepageTmpl,
		"templates/homepage.tmpl",
	)
}

func templatesHomepageTmpl() (*asset, error) {
	bytes, err := templatesHomepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/homepage.tmpl", size: 11472, mode: os.FileMode(420), modTime: time.Unix(1480589137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x71\x6f\xdb\xb6\x13\xfd\xbb\xf9\x14\x57\xfe\x10\xc4\x29\x4c\x29\xae\x93\x20\x6e\x2d\xff\xd0\xb4\x01\xda\xad\x6d\x0a\x34\x03\x36\x14\xc5\x4a\x91\x27\x8b\x09\x45\x6a\xe4\xc9\xae\xa7\xe9\xbb\x0f\xb2\xe5\x38\x8e\xd3\x6e\x18\x50\xff\x23\x51\xbc\x7b\xef\x1d\xf9\xee\xe0\xf1\xe3\x57\x97\x2f\xaf\x7e\xfb\x70\x01\x39\x15\x66\xb2\x37\x5e\x3f\x50\xa8\xc9\x1e\x00\xc0\x98\x34\x19\x9c\xd4\x35\x44\xef\x90\x84\x12\x24\xa2\xab\xf6\x13\x34\x0d\x70\xb8\xcc\x32\x2d\x11\x32\xe7\xe1\xbd\x20\xed\xac\x30\xf0\x91\x04\xe9\x40\x5a\x86\x71\xbc\xca\x5e\x21\x15\x48\x02\xac\x28\x30\x61\x0a\x83\xf4\xba\x6c\x13\x18\x48\x67\x09\x2d\x25\x6c\x8b\xe4\xd5\x26\xa4\x69\xd8\x2e\xc4\x0d\x2e\xe6\xce\xab\xb0\x95\xef\x85\x9d\xe2\x1d\x90\x9f\xbb\xa0\xa6\x81\xba\xe6\x10\x35\x4d\x1f\xea\x1a\xad\xba\x07\x99\x13\x95\x1c\xff\xa8\xf4\x2c\x61\xbf\xf2\x5f\x5e\xf0\x97\xae\x28\x05\xe9\xd4\xe0\x1d\xfc\x37\x17\x09\xaa\x29\xf6\x65\xee\x5d\x81\xc9\x80\x41\x7c\x17\x44\xe6\xc2\x07\xa4\x84\x55\x94\xf1\x33\xb6\xbd\xb7\xc6\x98\x6b\x45\x79\xa2\x70\xa6\x25\xf2\xe5\xa2\xaf\xad\x26\x2d\x0c\x0f\x52\x18\x4c\x06\xd1\x51\xbf\x0a\xe8\x97\x4b\x91\x9a\x25\xcf\xaa\xe4\x99\xc6\x79\xe9\x3c\x3d\x70\x1a\x99\xf3\x85\x20\xae\x90\x50\xde\x3b\x55\x42\x83\x65\xee\x2c\x26\xd6\x3d\x90\x49\x39\x16\xc8\xa5\x33\xce\xdf\x49\xfa\xdf\xc9\xd9\xc9\xe8\xe4\xfc\x81\x78\x51\x96\x06\x79\xe1\x52\x6d\x90\xcf\x31\xe5\xa2\x2c\x79\x20\x41\x55\xe0\xa9\xf0\x3c\xd0\x62\xeb\xd0\x36\x48\x7b\x8f\x1e\xd5\xf5\x97\xf1\x63\xce\x3f\xe9\x0c\x0c\x21\xbc\xb9\x80\xb3\xcf\x93\x2f\xf0\x17\x04\x91\xe1\xeb\xab\x77\x6f\x9b\x66\x49\x08\x30\x36\xda\xde\x80\x47\x93\xb0\x25\x62\xc8\x11\x89\x41\xee\x31\x6b\x2f\x3a\xfa\x20\x88\xd0\xdb\xb7\x3a\xf5\xc2\x2f\x5e\x84\x80\x14\x3e\x08\xca\x9b\x26\x96\x21\xc4\xce\x28\xae\x31\x92\x21\xb0\xc9\x9a\xf7\x13\x5a\xa5\xb3\xcf\x9c\x3f\xc4\x78\x47\xd9\x9b\x0b\x18\xfd\x18\x55\x1a\xf9\xa8\xd3\x74\xcb\xf9\x4d\x55\x5b\xa7\x35\xa5\x4e\x56\xfb\xe1\x87\x68\x2b\x84\xb6\xf7\xb5\x71\xfe\x1d\x7d\x2b\x67\xac\x9a\x14\x68\x51\x62\x72\x40\xf8\x95\xe2\x6b\x31\x13\xab\xaf\x07\x93\x4e\x1a\xc0\x4c\x78\x38\xaf\xa6\xaf\xd1\xab\x97\xce\x66\x7a\x0a\x09\xd4\x2c\x43\x54\xa9\x90\x37\xec\x59\xcd\x72\xad\x90\x3d\x23\x5f\x61\xd3\x3c\xbf\xcd\xeb\x65\x95\x5d\x1a\xba\xa7\xfa\x40\x87\x50\xdf\xee\xac\x51\xd3\x1c\x12\x50\x91\xf4\x28\x08\x2f\x0c\x16\x68\xa9\x47\x87\xfd\xad\xc0\xf6\x17\x96\x71\x53\xa4\x2e\x28\x9c\x2f\xae\xc4\xf4\xbd\x28\xb0\x47\x87\x9f\x8e\x3e\x3f\xdf\xca\x48\xf3\xa8\xad\x09\x12\xd8\xa9\x6a\x27\x30\x78\xd9\xc6\xc5\xf1\x7c\x3e\x8f\xd2\x6a\x9a\xa3\x57\x91\x74\x45\x1c\xb4\xc2\x54\xf8\xd9\xd3\xe8\x3a\xfc\x5f\x94\xfa\x06\x17\xc9\xf4\xcf\xe1\x6c\x4a\xca\x0c\xcb\x9b\x7c\xf4\xb5\xf2\x95\x1b\x91\x17\xf7\x40\x43\x54\x0a\x8f\x96\xde\x3b\x85\x91\xb6\x01\x3d\x9d\x63\xe6\x3c\xf6\xd2\xbc\x0f\xe1\x70\x13\xdd\x1c\xf6\x94\x93\x55\x5b\x50\x1f\x0e\x3a\x85\xdd\xfe\x38\x5e\xad\x27\x7b\x7b\xe3\x78\x35\xd2\xc7\xa9\x53\x0b\x90\x46\x84\xb0\x9a\xb7\x57\x6d\x91\xcb\x69\xd8\x5d\x3b\x10\x16\xa5\x11\x84\xc0\x4a\xe1\xdb\xc1\x14\x96\xb9\xe8\x19\x44\x70\x7b\xef\xad\x5d\x40\xab\x84\xb5\x2f\x0c\xbc\x33\xb8\x7e\x27\x91\x6a\xab\xf0\x6b\xc2\xf8\x80\x6d\x2c\x50\xd7\x0b\x8d\x46\x75\x7e\x1d\x2f\x0d\xf7\x5d\xd6\xcc\x39\x6a\x59\xd7\x9c\x3b\xed\x70\xf6\xbd\x76\xa8\xeb\xf8\x09\x5c\x5d\xbe\xba\x04\x0e\x55\xa9\x5a\x68\x67\xc1\xe8\x19\x42\x5a\x69\xa3\x80\x1c\x54\x01\x81\xe6\x0e\x7e\xfa\x08\x99\x36\x18\xfa\x60\x1d\x81\x80\xa0\xed\xd4\xb4\xf1\x08\x4f\xe2\x4d\x83\xdd\xf5\x3a\xbb\xe7\x0a\x06\xc1\xcb\x7f\xea\xb3\xeb\xae\xcd\xae\x03\x9b\x6c\x2e\xe7\xdf\xa3\xb7\x00\xa2\x2c\x1f\xc8\xff\x2f\xed\xba\x43\xb2\xdd\xae\xc6\xb9\x72\x30\xf8\xfd\x06\x17\x90\x00\x3b\x1a\x1c\x1d\x1f\x9d\x1c\xa7\xc3\xf4\xe4\x54\x0d\x47\xa7\xe9\xf1\x53\x3c\x3d\x3d\x53\x19\x1e\x8d\x4e\x25\xe2\xe0\x74\x70\x7c\x72\x2c\xce\xd8\xc6\x9a\x6b\x5f\x46\x73\xaf\x09\x7b\x95\xc5\x20\x45\x89\x3d\xb6\x3f\x94\x9d\x8e\xb6\xaa\x83\x38\x96\xca\x46\x2b\xba\x65\xdb\x14\x8b\xb8\x5b\x5d\x87\x83\x6f\x8c\x96\xfd\x21\xee\x0f\x65\x77\x06\xfb\x43\x64\x87\x3b\xa6\x1f\xc7\xad\xd9\xdb\xe7\xea\x5f\xcd\xdf\x01\x00\x00\xff\xff\x7f\xe9\x01\x5f\xed\x08\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 2285, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\x20\xf8\xb4\x01\x93\x18\x34\xc0\x1e\x06\x59\x40\x50\x2c\x6d\xb1\x20\x2e\x90\x6e\x7b\x34\x4e\xe4\x49\xba\x99\x3a\x0a\x24\x25\xc5\x2b\xfa\xdf\x07\x4a\x71\x9d\xcd\x29\xd6\x38\xdd\x5e\x6c\xf9\x8e\xdf\x77\xe7\xfb\xee\x8e\x2a\x6a\xe7\x22\x7a\xa1\x2d\x84\xb0\x96\xbd\x27\x8e\x59\xd6\x92\x41\x59\xae\x8a\xf6\xd5\xc1\x31\x52\x18\xc0\xda\x7d\x4b\xc6\x20\xcb\xf2\x7a\x81\x59\xe2\x5d\x28\x54\xfb\xaa\x5c\x15\x86\xc6\xc3\xe9\x85\x54\xfe\xdd\x38\x79\xe8\xfb\xc5\xca\x30\x3e\x05\xc8\x18\x46\xa1\x9d\xcd\xd2\xd1\x7f\xa0\xb5\xb3\xb3\x2b\xb3\x4d\xe6\x18\xb3\xd8\x92\x37\x8b\xa5\x33\x47\xcb\x9c\xf5\xe5\x29\xed\x76\xdb\x22\x18\xe2\x46\x96\x6f\xd1\xf6\x85\x6a\x2f\xcb\x55\x31\xd8\xa7\x4e\x5a\x0a\x31\xf1\x58\x7a\xca\x4b\x11\xbb\xe4\x05\xd1\x7a\xac\xd7\x52\xb5\x68\x7b\x05\x5a\x63\x08\x54\x91\xa5\xb8\x97\xe5\xd5\xe3\x9f\x85\x82\x72\x55\x28\x4b\xcf\xe4\xd4\xce\xed\x08\x03\xb0\xe9\x3d\x8d\xa0\xf7\xb2\x7c\xbd\x98\x04\xb0\x11\x0f\xc6\x73\xd9\x23\xfa\x2e\x71\x6b\xc7\x86\x22\x39\x0e\xb2\xfc\x90\x6c\x33\xf9\xd1\xfa\x98\x5f\x0d\x36\x7d\x1a\x1a\xff\x2b\x71\xae\x2a\x37\x44\xb1\xb9\xbd\xfb\x96\x0a\x41\x22\x1d\x82\x9a\x5a\x88\x13\x1a\x27\xcb\xdf\x5b\x88\x62\x42\x61\xdc\x19\xe5\x3b\xd0\x69\xf0\x88\x3e\xc8\xf2\xf5\xf2\xf0\x12\x2a\xc7\x11\x74\x1c\x12\xd9\xf2\x28\x86\x73\xf8\x18\xa7\x20\xcb\x5b\x9c\x5e\x92\x4c\xf4\xc0\xa1\x07\x8f\xac\xf7\xc0\xa6\x71\x23\x7a\x06\xd6\xa8\x6a\x8f\x68\x5c\xe7\x6a\xe2\xda\xf9\x0e\x52\x83\xd4\x8e\x64\x79\xbd\x38\x84\xab\xc5\xbb\xa3\xeb\xff\x6d\x9d\xd7\x8e\x19\x75\x14\x13\xc5\x76\xae\xde\x37\x6b\xa0\x36\xc6\x3e\xfc\xa4\x54\x9c\x28\x46\xf4\xb9\x76\x9d\xda\xdc\xde\xc9\x03\x96\xb4\xe3\x87\xa5\x29\x22\xf8\x06\xe3\x5a\x6e\x2b\x0b\xbc\x93\xe5\x87\x05\xf3\x7c\x39\x0e\x41\xa7\x69\xca\x6b\xd0\x58\x39\xb7\x7b\x56\xe4\xeb\x07\xd0\xcb\x42\xa7\x0d\x8f\x86\x78\x0e\xad\x5d\xd7\x03\xef\x95\xab\x6b\xd2\x98\xd5\x2e\x11\x24\xa5\xc1\x66\x21\x42\xa4\x10\x49\x87\xaf\xca\xee\x66\xe6\x7d\xc7\xe7\x67\xd7\x0f\x95\x25\x9d\x37\x6e\x34\x68\x69\x44\xbf\x9f\x73\x04\xad\xdd\xc0\x31\xa8\x5f\x7f\xd9\xdc\xde\xa9\x30\x54\x41\x7b\xaa\xd0\x87\x34\x1d\x5f\x95\xdb\xcf\x1d\x90\x15\x60\xd1\xc7\x2f\xaf\xbf\xc3\xd7\x72\x97\x9d\x36\xf6\xa3\xeb\xee\xf4\xa2\xb3\xa4\x91\xc3\x7c\xc7\x52\xd7\x3c\xed\xdc\x6e\xa9\x6b\xa4\x00\x1b\xd7\x72\xf3\xe6\x46\x8a\x89\x4c\x6c\xd7\xf2\xc7\x0b\x29\x82\xd7\x6b\xf9\xf1\x63\xfe\x1e\x52\x73\xf1\x0d\x55\x1e\xfc\xfe\x2a\x04\x8c\xe1\x3d\xc4\xf6\xd3\x27\x45\x5d\xa3\x5c\x63\xf3\x3e\xcd\xc6\xaa\xe8\xbf\x14\x24\xe2\x7d\x14\x1d\xf8\x86\x38\xb3\x58\xc7\x2c\x74\x59\x76\x21\xcb\xd5\x95\x4d\x93\xc9\x11\x39\x0a\x0a\x02\x46\x20\x0b\x95\x45\x31\xb0\x41\x2f\x62\x8b\xa2\x80\xa7\xca\x79\x94\xe9\xa1\x87\x0e\x3d\x02\x5e\xb7\x34\x62\x48\x9a\xe5\xc3\x4e\x19\xa7\x95\xeb\x91\xb3\x65\xc5\x74\xc8\x71\xc9\x4b\xa3\x1a\xd1\x07\x72\xac\x2e\xd5\xa9\x3e\x9b\x1e\x59\xbc\xf9\x8c\x11\x37\x0b\x46\x8c\x97\xf9\x45\xd2\x4b\x14\xa1\x07\x7e\x9c\x9a\x98\xf3\xc3\xfb\x54\x2c\x48\xcb\x86\x9a\x36\xfd\x53\xb0\x56\x96\x85\x4a\xc7\xcb\x1f\x04\xde\x6b\xec\xa3\x98\x5a\xf4\x28\x5c\x6c\xd1\x4f\x14\x50\xa4\xce\x46\xb3\x2a\x54\x7f\xaa\xfe\x51\x76\x32\xe9\x2d\x09\xa7\xde\xf9\xc4\xfc\xb9\xd1\xfe\x08\xd9\xd1\x4c\x7f\x62\x8a\x97\x50\xa7\xa0\xce\x9c\x01\xb2\xcd\xbf\x83\xd4\xa2\xf9\x3c\x43\x09\xdc\xed\xb7\x35\xa2\xa9\x40\xef\xa4\x70\xac\x2d\xe9\x5d\xaa\xee\xd0\xbc\x45\x6f\xf2\x89\x38\xaf\x86\xa6\x4d\xcf\xd0\xf7\x96\xf4\xac\xdf\x6f\x84\x53\x0e\xec\x78\xdf\xb9\x21\x54\xe0\xf3\xe8\x9a\xc6\xe2\xa6\x9f\xdf\x13\xbe\xfb\x3e\x09\x55\x11\x1b\xbc\x5f\xcb\x0b\x59\xde\x21\x1b\x71\xfd\x10\x67\x1e\xa3\xbf\x02\x00\x00\xff\xff\xab\x7a\x66\x27\x6d\x0a\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2669, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4d\x93\xd3\x38\x13\xbe\xcf\xaf\xe8\xd2\x7b\x81\x83\x63\x06\xde\xda\x0f\xca\xc9\x16\x0c\x54\x41\x15\xb0\xd4\xcc\x70\xd8\x53\xaa\x63\x77\x1c\x11\x59\x32\x92\x9c\x99\x54\xd6\xff\x7d\x4b\xfe\x4e\x62\x3b\xc9\x2e\x07\xc8\x29\x96\x5b\xad\xa7\x9f\xfe\x94\x83\x15\x61\x44\x7a\x76\x05\x00\x10\x20\x84\x02\x8d\x99\x32\xb3\xe6\xa9\xe0\x72\xcd\x60\xa5\x69\x39\x65\xff\x4b\x90\x4b\x06\x16\x17\x5c\x46\xf4\x38\x65\xcf\xd8\xec\x6e\xcd\x53\xb0\x0a\xdc\x2b\x08\x95\xb4\x24\x6d\xe0\x63\xa5\x2a\xe2\x1b\xe0\xd1\x94\xa5\x18\xd3\x67\xb4\x2b\x56\xab\x5e\xf1\x88\xd8\x6c\xb7\x9b\x7c\xb9\x7d\x9f\xe7\x81\x1f\xf1\xcd\xec\xaa\xd8\xb3\xdb\xf1\x25\x4c\xee\x48\x6f\x78\x48\x1f\xc9\x18\x8c\x29\xcf\x8b\x57\x8d\xca\x4a\xc9\x82\x2c\x7a\x0b\x94\x92\x34\x9b\x35\x12\x87\x52\x0f\x1a\xd3\xf4\x48\xa2\x90\x4a\x1d\x82\xfd\xa3\xe0\x6f\x30\xb8\xa4\x77\xf7\x1f\x3f\x38\x5c\xe9\x81\xde\x12\x68\xcf\xe3\x6e\x47\x32\xca\xf3\xab\xab\xd3\xc7\x77\xdf\x96\xc4\x43\xa8\x84\xe7\x04\x47\xcc\x08\x95\x28\xc4\x3c\x11\x7b\x4a\x92\x67\x57\x5c\x47\xe5\x4a\x12\xb5\x2b\x7d\x66\x62\xe1\x03\xa1\x62\xe5\x75\xdd\xe9\xf7\xc8\x16\xf2\x3c\x89\xeb\x53\xdd\x26\x06\x46\x87\x53\xb6\xdb\x4d\x3e\xa3\xb5\xa4\xe5\x07\xbe\xd0\xa8\xb7\xaf\x8c\x21\x6b\x9c\x5b\xf3\xdc\xe7\x49\xec\x2b\x69\x3c\xb7\x61\x62\x36\x31\x03\x14\x76\xca\xfe\x5c\x2e\x79\x48\xb0\x54\x1a\x3e\xa1\xe5\x4a\xa2\x80\x3b\x8b\x96\x1b\xcb\x43\xd3\x07\xb6\x8e\x9d\x01\xca\xc7\x68\xb1\x0f\xaa\x24\xc1\x34\xbc\x74\x96\x5c\xc8\x79\x9e\x49\x20\xd5\x5c\x5a\xcf\x2b\x43\xf0\x18\x40\x24\x4a\xba\x50\xc6\x19\xc6\xd4\x84\x6c\xb3\x30\xc0\x5a\x64\x0f\x25\xe7\x73\xcb\xad\x20\x36\xbb\x59\xa1\x8c\x09\xea\xf5\x97\x81\x1f\xd9\x21\x2d\xd1\xb1\x16\x6e\x29\x19\x38\x15\xea\x8c\xa1\x6f\x30\xf9\x50\xed\x00\x46\x92\xe5\x79\x9b\xc8\xad\x2a\xe7\x7f\xe0\xa1\x92\x95\xfd\x75\x28\xf8\xe1\x76\xe2\x72\x81\x5b\x7a\xa3\x5c\x2e\xe7\x79\x9d\x9c\x6c\x76\xb3\x4d\x34\x52\x0c\x4f\x6e\xfe\x7a\xea\xfc\x53\xc7\xfa\x05\x80\xc2\xed\xa5\x80\x06\xd1\xbc\x95\xb1\xe0\x66\x05\x4f\xde\x7e\x3a\x89\x26\xf0\xa3\xa8\x2f\xc6\x22\x71\x51\x90\x19\x0a\x95\x8c\x50\x6f\x3d\x89\x1b\x38\x3f\xe4\x4e\x44\x5a\x56\x46\x9a\xc4\x8d\xd7\x9c\xc0\x7a\xcf\x74\x3c\x19\x0b\x5f\x8d\x7b\xf0\x42\xa1\x24\x95\x4b\x43\xc1\x28\xf8\x80\x9e\x13\xb1\xd4\x29\xfe\x87\xe7\xcb\x35\x1c\x01\xe8\x14\x13\x4d\x82\xd0\x50\x88\x82\xdc\x36\x36\xbb\x2d\x17\xa0\x5e\x39\xca\xec\x96\x7c\xc1\x7f\x18\x33\x12\xb2\x2b\x15\x29\xa1\xe2\x2d\x9b\x7d\x6c\x1f\x7e\x0e\xf4\x92\x1e\x8c\x83\x1d\x71\xfc\x39\x00\xe3\x42\x65\x36\x33\x6c\xf6\xca\xfd\xf9\x71\x30\xb7\x15\xa9\x17\xbd\x45\x1d\x93\x9d\xb2\xf9\x42\xa0\x7b\xd6\x24\xa6\x4c\x2a\x95\x92\x24\x0d\x52\x69\x5a\x92\xd6\xa4\x6b\x3b\x57\xd6\xa6\xe6\xa5\xef\x2f\x84\x8a\x27\x4a\x9a\x49\xac\x36\x93\x6c\xed\xb3\xd9\x6b\xa1\xe2\x0b\xcd\x0e\xfc\x6c\xbc\x7c\x75\x1e\xbb\x7f\x3b\x05\x2d\xd5\x3c\xa9\xcb\x59\x7f\x91\x0a\x24\x1e\x16\xc4\x4c\xd4\xdb\x1d\x1f\x9e\x1b\xf6\xb4\x12\xbd\x4d\xbc\x75\xca\x9e\xe8\xa8\x53\x02\xac\xc7\x4c\xb7\xa7\x42\xc8\x8a\x0a\x99\x90\xcc\x3c\xab\xe2\x58\x10\x03\xd4\x1c\x1b\x8d\xe5\x01\x8d\x70\xff\xa1\x6e\xfb\x58\x24\x98\x14\xe5\xc0\x56\x4b\x8f\xd6\x25\x94\xcc\x02\xdf\x89\x0d\xf9\xa9\xc7\x81\x03\xce\x1b\xa5\x06\xce\xe2\xc6\x10\xea\x70\x55\x52\x53\xfe\x1f\x23\xa7\x96\xee\x3f\xb5\x7a\xfb\x5f\xd8\xb9\x2b\x54\x7c\x07\x7e\x7a\x02\xfb\x78\x90\x06\x87\xc1\xcd\x04\x45\xc8\x46\x24\x59\xd3\x44\x9b\x30\x28\x58\xa0\xc7\x14\x65\x44\xd1\x94\x2d\x51\x98\xa1\x06\x7c\x9c\x10\xe7\x36\xd6\xbd\x2d\x85\xf3\x9a\xb9\xe7\xcb\xed\x7b\x60\x3e\xcb\xf3\x23\x19\xcf\xc3\xd0\xf2\x0d\x55\x43\x4b\x55\x5c\xda\xd9\x54\x89\xc8\xe3\xe4\x79\x11\x37\xa9\xc0\xad\xb7\x10\x2a\x5c\x0f\x7a\xa7\xad\x61\x07\xf8\xe5\xba\x9d\x52\x92\xc8\xfb\xb5\x99\x57\x7e\xef\x0c\xff\xef\x54\x42\xff\xa2\xe2\xee\x76\xba\x98\x66\x27\xf7\xf8\xa8\xa4\x4a\xb6\x23\x93\xe0\x28\x5d\x95\xed\x5f\x4d\xe5\x2a\x5c\x88\xa1\xe1\xba\x63\x70\x09\xbf\x19\x07\xcf\x23\xe0\xb7\x86\x80\xeb\x67\x55\x78\xac\xd0\xa4\x2a\xcd\xd2\x29\xb3\x3a\x2b\xef\xa2\xf7\x6e\x5a\x77\xb7\xbe\x01\x4e\x5a\x06\xdc\x15\xf5\x66\xc5\x45\xa4\x49\x8e\x98\xdf\xc0\x1e\x08\xb4\xd0\xa9\xf0\x8a\xd1\xae\x8b\xf6\xfa\x97\x06\xee\xf3\x67\xfb\xfc\xcc\xe7\xd5\x1d\xbb\x6e\x4b\x75\x0e\xf4\x86\x7c\xb9\x2a\x70\xe1\xda\x93\xc9\x16\x27\x0a\xe1\xbe\x8d\x95\x97\x2f\x30\xb3\x31\x77\xc0\xeb\xa5\xb9\x85\xef\x8f\xac\x72\xaf\xce\x84\xd6\x1c\x73\x5e\x30\xd4\x24\x97\x7d\xbb\xfe\x74\xe1\x5d\x5f\xe4\xf2\xbd\x73\x07\x53\xe3\xf0\x77\xea\xa2\xd4\x6a\x3c\x2c\x7c\x97\x6a\x1a\x4b\xd7\x91\xeb\xd1\xe9\xf4\x3c\x6b\x82\x3a\x4e\xbe\x91\xec\xab\xea\x8f\xc9\xf4\x86\xb6\x7d\xd3\x43\xf7\x77\x8f\x6b\x2e\x63\x48\x51\x5b\xe0\x12\x10\xca\x6d\x7f\x8c\x10\xf1\xbd\x67\xa9\x66\x10\x1a\x98\xa5\xca\x0e\x0a\x6d\xab\xad\x1b\xd3\xde\x64\xd5\x69\xd6\xaf\x71\xe8\x6b\x50\xfd\xad\x08\xb4\x12\x54\x8b\x1f\x7e\x13\x5a\x2a\x9d\x74\xbe\x7e\x14\xdf\x8d\xa0\x14\x9d\xcf\xdd\x4b\x06\xae\xc7\x28\xe9\x48\x1e\xea\xee\x41\x51\x14\xf6\x4d\x98\xcf\xab\xc5\x8e\xeb\x9e\xbf\x68\x4b\xd1\xff\x19\x2c\x95\xde\x1b\x2a\xaa\xde\x5f\x7c\xdf\x41\x58\xd3\xf6\x41\xe9\xe8\x89\x79\x0a\x4a\x83\xe5\x09\x81\x21\xcd\xc9\xc0\xfb\x37\x81\x5f\x28\xef\x41\xc2\x65\x9a\x59\xb0\xdb\xb4\xb5\x18\x30\xb3\x2a\x54\x49\x2a\xc8\xd2\x94\xa9\xe5\x92\x1d\x42\x2d\x77\xed\x41\xbd\x6e\xa0\xbe\x78\xce\x3a\x37\xeb\x42\xe5\x50\xc0\x48\x4c\x68\xca\xbe\x31\xd8\xa0\xc8\x68\xca\xfa\xb8\x5a\x64\xd6\x2a\x59\x43\xcc\x16\x09\xb7\x47\x78\x2a\x99\x1a\x4c\x4b\xdb\x8b\x43\x28\x5e\xa5\x61\x20\x4c\xbb\xe3\xd6\x86\x9b\x0c\x85\xd8\x56\x45\xfe\x9c\x49\xab\xbb\xdd\x5d\x62\xca\x9b\x4c\x1d\x98\x82\xc7\x2b\xcb\x66\x43\x1a\x02\xbf\x34\xe3\x30\x23\x5c\x54\x8d\x5d\x2f\x02\xbf\xfe\x80\xfc\x4f\x00\x00\x00\xff\xff\xc9\xd0\x29\x34\x4a\x16\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 5706, mode: os.FileMode(420), modTime: time.Unix(1487863982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProductpageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4b\x8f\xa4\x36\x10\xbe\xef\xaf\x28\x71\xaf\x61\x98\x5e\xe5\x21\x31\x1d\x25\xd9\x43\x22\x25\x52\x14\x25\xe7\x96\x1b\x17\xb6\xd3\xc6\x46\xc6\xf4\x6c\x6b\xd4\xff\x3d\x82\x81\x06\xdb\xf4\x3e\xb4\x27\xfc\x28\x97\xeb\xfb\xea\xab\x32\x25\x57\x67\xa8\x34\xeb\xba\xe7\xac\x65\x82\x50\x19\xef\x2c\x1c\x59\x75\x12\xce\xf6\x86\x23\x0a\xa6\x35\xb9\x4b\xb6\x7f\x07\xb0\x36\x7f\x71\xac\x6d\xc9\x8d\xeb\xe1\x4e\x65\x35\x0e\xbb\xd3\x56\xb2\x79\x5b\x07\x28\x0d\x3b\x2f\xb3\xd0\xf2\xe8\x88\xf1\xca\xf5\xcd\x31\x5b\x9b\x00\x94\x56\x83\xe2\x81\x41\x7a\xe6\x70\xd0\xaa\xf3\xd1\x49\x80\xd7\x57\xc7\x8c\x20\x78\xf8\xe5\x66\x79\xbd\x46\x36\x00\xa5\x56\x5b\x1e\x95\xa7\x26\xf1\x38\xda\x33\x90\x8e\xea\xe7\xec\xf5\x15\x1e\xfe\xfd\xfb\xf7\xeb\xf5\x4e\x44\xe6\x94\xed\x07\x9b\x7f\x94\xd7\x74\xbd\x96\x39\x4b\xdd\x95\xb9\x56\x69\xd8\x64\x78\x14\x68\x99\x5b\x1d\x70\x97\x73\xb5\x22\xb3\xcc\x03\x6e\x47\x66\x07\xd6\x96\x34\x67\xab\x9c\xc0\x90\x34\x6c\x38\xbe\xff\xfe\x6d\xa8\x05\xee\x7e\x08\xc0\x96\xb2\x48\xa5\x72\x38\xf8\x01\xca\x1b\xaa\x3f\xc9\x33\xce\x3c\x5b\xe0\xc9\x22\xf0\xd0\x6e\x39\xa8\xac\xf1\x64\xe2\x54\x05\xfe\x3e\x50\x57\x39\xd5\x7a\x65\x4d\x40\x42\x99\xb7\x6b\xc0\x21\xfe\x95\x94\x0c\x3b\x63\x47\x95\x35\x9c\xb9\x0b\xe2\xd1\x3a\x4e\x0e\x35\xd5\x1e\xb5\x80\x3b\xf0\x8b\x1f\x6f\x43\x5b\xd7\x1d\x79\x7c\x82\x96\x71\xae\x8c\x18\x8f\x42\xc3\x9c\x50\x06\xbd\x6d\x07\x1b\xdc\x45\x6c\x3d\xcd\xb7\x47\x76\x45\xb6\xff\x4d\x09\xa9\x95\x90\x9e\x38\x4c\xf0\xcb\x5c\x3e\x05\xe7\xfb\x37\x91\xcb\xd9\xb4\xc3\x51\xd0\xb3\xd3\x61\x82\x68\xa8\xf7\x8e\xe9\x75\x28\x68\x48\x30\xaf\xce\x84\xd6\x10\xd6\xea\x63\x42\xec\x54\x01\x1f\x06\x66\x57\x91\xfc\xc5\x04\x75\x49\x31\x94\xa9\x18\x37\xf5\xfe\x19\x59\xa7\xa2\x4e\x25\x5d\xe6\xbd\xbe\x93\xce\xd5\xe4\x36\x9c\x06\xf3\x27\xee\x64\x13\xaf\x30\x25\x7b\xa4\x46\x39\x6b\xb0\x6b\xd2\xb5\x86\x7f\x53\x7f\x0b\x2b\x6d\xca\x5c\x25\x95\xe6\x8e\xcc\x27\xf2\x16\xa4\x26\x4c\xcc\xaf\xd3\xe9\xb8\xe8\x97\xce\xb4\x96\xad\x64\xba\x5e\xd4\x6a\x08\xbd\x54\x8e\x07\x7d\xbc\x21\x57\xf5\xee\x02\x92\x86\x74\x23\xee\x0a\x54\x86\x93\xf1\xc4\x91\xb4\x56\x6d\xa7\xba\x40\x47\x8f\xf3\x6c\xac\x93\x86\x23\x16\xf3\xca\xd1\x7a\x6f\x1b\x5c\x15\xc4\x74\x62\x9e\xba\xb7\x3b\x96\x85\xf9\xc4\x63\x50\x42\xc3\xfc\xbf\x0e\xa5\x3d\x93\xc3\x4a\xab\xea\x94\xb4\xd7\x35\xf1\x8d\x32\x38\x87\x5f\x3c\x6e\xbd\x52\x61\x3c\x4f\xd1\x65\x45\x1c\x5f\xb1\xd1\xcd\x4b\xb9\x9b\xef\xab\x75\xdf\xc9\x6c\xff\x05\x6a\x2f\x73\xb9\x4b\x25\x1f\xf4\xa3\x14\x4e\x10\x6b\x1a\x5b\xc2\x5d\x91\xc0\xf9\x1a\x6d\x47\x71\xb4\x11\xc8\x8d\x57\x6d\xc0\x78\xaf\xf3\xce\x10\xdb\x2f\x40\x1d\xd7\x7e\x5c\xf9\xeb\xba\x0f\x5e\xad\xa8\xe8\x3e\xa3\xf6\x6c\xe3\xb1\xd3\xb6\x62\x1a\x3b\xcf\xbc\xea\xbc\xaa\x86\x1e\x6a\x4e\xb7\x5a\x0c\xa5\xb7\xaa\x8c\xad\xc2\xc9\xee\xfe\xa7\xd8\x8f\x87\x83\x6a\x98\xa0\x50\x7d\xc5\x77\xf7\x53\x3a\x25\x30\xfe\xb1\x49\xa4\x17\x93\x3b\x2b\x31\x97\xa4\xdb\x7c\x44\xb7\x80\xcb\xf6\x7f\x58\x7b\x52\x46\x40\x6d\x1d\x8c\x9b\xb0\xec\xfe\xb4\xd5\x95\xbb\x96\x99\xf9\xca\x11\x02\x4a\xab\x39\xb9\x1b\x17\xc5\xfb\x6c\x5f\xaa\x46\x40\xe7\xaa\xe7\x2c\x57\x8d\xc8\x7d\x81\xa3\xef\x87\xd6\x88\x0c\x98\xf6\xcf\x59\x06\xf9\xbe\xcc\x07\x67\x71\xe6\xe3\xb2\x58\x74\x37\xd2\x36\x37\xe9\x6d\xb8\x3f\x83\x64\x86\x5f\x40\xf4\x8a\x13\x78\x0b\x9a\x3c\x5c\x6c\x0f\x27\x63\x5f\xe0\x45\x92\x1b\x57\x6b\x65\x78\x02\xf7\xe1\xdd\x27\x84\x9a\xfc\x2a\x7d\xd5\x53\xf3\x7f\x00\x00\x00\xff\xff\xad\x53\x4d\x1a\x35\x0b\x00\x00")

func templatesProductpageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesProductpageTmpl,
		"templates/productPage.tmpl",
	)
}

func templatesProductpageTmpl() (*asset, error) {
	bytes, err := templatesProductpageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/productPage.tmpl", size: 2869, mode: os.FileMode(420), modTime: time.Unix(1480589137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dd/dataset.tmpl": templatesDdDatasetTmpl,
	"templates/dd/datasetList.tmpl": templatesDdDatasetlistTmpl,
	"templates/dd/disabled.tmpl": templatesDdDisabledTmpl,
	"templates/dd/splash.tmpl": templatesDdSplashTmpl,
	"templates/error.tmpl": templatesErrorTmpl,
	"templates/homepage.tmpl": templatesHomepageTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
	"templates/productPage.tmpl": templatesProductpageTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dd": &bintree{nil, map[string]*bintree{
			"dataset.tmpl": &bintree{templatesDdDatasetTmpl, map[string]*bintree{}},
			"datasetList.tmpl": &bintree{templatesDdDatasetlistTmpl, map[string]*bintree{}},
			"disabled.tmpl": &bintree{templatesDdDisabledTmpl, map[string]*bintree{}},
			"splash.tmpl": &bintree{templatesDdSplashTmpl, map[string]*bintree{}},
		}},
		"error.tmpl": &bintree{templatesErrorTmpl, map[string]*bintree{}},
		"homepage.tmpl": &bintree{templatesHomepageTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
		"productPage.tmpl": &bintree{templatesProductpageTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

