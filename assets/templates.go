// Code generated by go-bindata.
// sources:
// templates/homepage.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHomepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x95\xdf\x6f\xdb\x36\x10\xc7\xdf\xf3\x57\x1c\x52\x14\xd9\xaa\x9f\x94\x22\x7b\xf5\x18\xbd\x24\xf5\x16\x6c\x45\x82\x35\xc5\xb6\x47\x5a\x3c\x59\x84\x29\xd1\x20\xe9\x06\x89\xa1\xff\x7d\xa0\x7e\xd8\x6a\x3b\x23\xc5\xb0\xed\x49\x24\xef\xee\xcb\x0f\x8f\xbc\x13\xad\x6c\x2d\xf3\x33\x00\x5a\x21\xe3\x6e\x00\x40\xad\xb0\x12\xf3\xfd\x1e\xc2\xf7\x68\x19\x67\x96\x85\x0f\x6e\x09\xda\x96\x46\xbd\xb1\x77\xac\xd1\x32\x68\x58\x8d\x57\xe7\x1c\x4d\xa1\xc5\xd6\x0a\xd5\x9c\x43\xa1\x1a\x8b\x8d\xbd\x3a\xff\x4c\xe3\xe6\xe8\xd2\xb6\xe7\x5f\x4b\x6c\xf0\xe9\x51\x69\x6e\x3e\x8b\xd7\xac\x59\xe3\x44\xe4\x97\xc1\xa9\x6d\x61\xbf\x0f\x20\x6c\x5b\x1f\xf6\x7b\x6c\xf8\x51\xd2\xd8\xa7\x91\x10\x60\xa5\xf8\x13\xec\x87\x09\x40\xf4\x06\xee\x51\xd7\x4c\x8a\x66\x03\x01\xec\x0c\x82\x55\x80\x5c\x58\x60\x0d\x07\x53\x31\x8d\x60\x2b\x61\x60\xad\x19\x17\xd8\xd8\x05\x54\xd6\x6e\x17\x51\x54\x28\xa9\xf4\xb3\x90\x92\x85\x85\xaa\xa3\xd1\x1e\xb8\x60\xa5\xa3\x57\x88\x65\x99\x66\x5e\xec\x97\x64\x56\x66\x85\x97\xc5\x7e\x39\x4b\xde\xc6\x85\x97\x11\x9f\xa4\x05\xb9\xbc\xf4\xe6\x89\x8f\xf3\xf4\x87\x64\xee\x91\x38\x86\x37\xd1\x81\x6b\xc5\x8a\xcd\x5a\xab\x5d\xc3\x17\x30\x28\xfd\xe8\x60\xef\x24\x87\x95\x56\x8f\x06\xb5\x39\xe5\x1f\xd4\xea\x39\x90\xa2\x41\xa6\x83\x91\xea\xbb\xe0\x32\xe3\xb8\xf6\x61\x54\x83\xf8\xb5\x0f\xaf\x7a\x34\xc8\xfa\x49\x47\x07\x19\x71\x93\x1e\x10\xe6\x89\x9b\xf4\x8c\x40\xe2\xf8\xf5\xf7\x1d\xc6\x72\x99\x86\xb3\x80\x64\x27\x11\x1e\x71\xb5\x11\xf6\x9b\x28\xa6\x10\x53\x86\x29\xc2\xd7\x04\xd7\x95\x56\x35\x92\x38\x48\x32\xff\x03\x2b\x99\x16\x59\x48\x82\xd9\x29\xa0\x2f\x41\x48\xfa\x6f\x81\xfc\x9e\x5e\xfb\x70\xfb\x8e\xc4\x9e\x0f\xcb\x25\x99\x79\xfe\xc0\x96\xb8\xe1\xdd\x16\x35\x23\x89\xe7\x43\x0f\x39\xf7\xa6\x84\xa5\x90\x16\xf5\x02\xb6\x5a\xad\x05\x5f\xdc\xfc\x71\x5b\xb3\x35\x3e\x68\xd6\x98\x52\xe9\x3a\x7c\x2f\x0a\xad\x8c\x2a\x6d\x78\x00\x07\x63\x99\xb6\xd7\xee\xed\x19\xab\xaf\x2e\x06\xfe\x0b\x1f\xb0\xe1\xd3\xe5\x8e\xf3\xc2\xff\x69\x08\x7c\x78\xda\xe2\x15\x81\x9e\xf9\xf6\xdd\x2c\x78\x0b\x25\x93\xd2\xe5\x08\x54\x03\x95\xd2\xe2\x59\x35\x96\xc9\xc3\x43\x3f\x82\xb6\x7d\x1d\x45\x87\x42\xa2\xd1\xd8\x1d\x68\x57\x4f\x85\x64\xc6\xf4\xd5\xed\xf6\x81\x63\xed\x55\xe4\x54\xdf\xa8\x48\x7e\x36\xe8\xd3\x2a\xc9\x7f\x65\x16\x8d\x85\xed\x6e\x25\x45\xc1\x5c\x4f\x30\x34\xaa\x92\xb1\x6c\xe9\x4e\x8e\xc3\x43\x0f\xb8\x9f\xf8\xb6\xed\x21\xa9\x54\x8a\x9c\x56\x69\x4e\x19\x54\x1a\xcb\x1e\xeb\xe3\x6f\xb7\x0e\xaa\x23\x74\x08\x8e\x80\xe5\x34\x72\x7e\x91\x14\x47\xed\xae\x73\x8c\x9b\x46\x6e\xd7\x09\xe4\xcf\xc8\xb8\x7b\x49\x50\x8a\xf5\x4e\xe3\x8b\x84\x37\xcc\xb2\x7f\x42\x56\xa5\xf9\x21\x08\x80\x72\xf1\x69\x4c\xb1\xd9\x32\xbd\x71\x08\x2e\x62\xd8\xe5\xc3\xb8\xd6\xf5\x40\x08\xff\xec\xbe\xdd\x41\x68\xc4\xc5\xa7\xa9\x96\xb3\x8f\xa7\x58\x76\x87\x08\xef\x35\x7e\x6c\x84\x1d\x82\xbf\x30\xf6\x9f\xbf\xb7\xf5\x51\xc7\xd3\x7d\x7b\x1e\x97\xc8\xec\x4e\x23\x1f\x1b\xfb\x4b\x79\x1c\xfd\xff\x9f\x5b\xbe\xb3\x15\x6a\x50\x65\x29\x0a\xc1\xa4\x2b\x38\x2b\x8c\x15\xc5\x8b\xd7\xdd\x05\xfe\xb7\x8c\x34\x72\x05\x97\x9f\xd1\xa8\xff\x51\xff\x15\x00\x00\xff\xff\x65\x84\x53\xb5\xb0\x07\x00\x00")

func templatesHomepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomepageTmpl,
		"templates/homepage.tmpl",
	)
}

func templatesHomepageTmpl() (*asset, error) {
	bytes, err := templatesHomepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/homepage.tmpl", size: 1968, mode: os.FileMode(420), modTime: time.Unix(1476434966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/homepage.tmpl": templatesHomepageTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"homepage.tmpl": &bintree{templatesHomepageTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

