// Code generated by go-bindata.
// sources:
// templates/homepage.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHomepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\xb1\x83\x4e\x27\x77\x95\x28\xbe\xc8\xb2\x2f\xae\x84\x4e\x2f\x8e\x5b\x9f\x93\x3a\x97\xd8\x97\xb6\xdf\x20\x72\x49\xe2\x0c\x02\x3c\x00\xb2\x2c\x6b\xf4\xdf\x6f\x40\x8a\xb2\xac\x48\x8a\x93\xd2\x9d\xc9\xcd\xd9\x1f\x4c\x80\x8b\x67\x1f\xec\x1b\x16\xf4\x30\xb7\x85\xa0\xcf\x86\x39\xb2\x84\x3e\x03\x00\x18\x5a\x6e\x05\xd2\xf9\x1c\x7a\x6f\xd0\xb2\x84\x59\xd6\xbb\x74\x53\xb0\x58\x0c\xfd\xfa\x65\x2d\x58\xa0\x65\x20\x59\x81\x23\x92\xa0\x89\x35\x2f\x2d\x57\x92\x40\xac\xa4\x45\x69\x47\xe4\x01\xc6\xc9\xbd\xc8\x62\x41\x3e\x86\xb8\xc6\xd9\x54\xe9\xc4\x3c\x58\xaf\x99\xcc\x70\x0d\xe4\x7c\x29\xb4\x58\xc0\x7c\xee\x41\x6f\xb1\xe8\xc2\x7c\x8e\x32\xb9\x87\x14\x5c\x5e\x43\xae\x31\x1d\x91\xdc\xda\xf2\xd8\xf7\xc3\xe8\xa8\x17\xf4\x82\x5e\x78\xfc\x22\x08\x02\x3f\xe1\xc6\xfa\xb1\x31\x7e\xc1\xb8\xec\xc5\xc6\x10\xd0\x28\x46\xc4\xd8\x99\x40\x93\x23\x5a\x02\x76\x56\xe2\x88\x58\xbc\xad\x24\x1b\xe8\x4a\xa2\x7e\x76\x3f\x63\x95\xcc\x60\xbe\x1a\xba\x1f\xff\x3b\x78\x8b\xba\x60\x15\x09\x0f\x26\x06\xc1\x2a\xc0\x84\x5b\x60\x32\x01\x93\x33\x8d\x60\x73\x6e\x20\xd3\x2c\xe1\x28\xed\x31\x2c\x59\xc6\x4a\x28\x7d\xc7\x85\x60\xbd\x58\x15\x7e\xf3\xde\x73\x8b\x95\xf6\xbf\x41\x4c\xd3\xfe\xa0\x13\x74\xd3\xf0\x30\x1d\xc4\x9d\x41\xd0\x4d\x0f\xa3\x17\x41\xdc\x19\x84\xdd\xb0\x1f\x87\x07\x07\x9d\xa3\xa8\x8b\x47\xfd\xbf\x45\x47\x9d\x30\x08\xe0\x3b\xff\x01\xb7\x31\x8b\xaf\x33\xad\x26\x32\x39\x86\x25\xda\xf7\x8e\xf0\x85\x48\x60\xac\xd5\xd4\xa0\x36\xfb\xd6\x78\x85\xba\xf3\x04\x97\xc8\xb4\xd7\xb0\xfb\x8b\x77\x30\x48\x30\xeb\x36\x80\x10\x7c\xdb\x85\x6f\x6a\x86\x30\xa8\x07\x15\x49\x18\x84\x6e\x50\xf3\x84\xa3\xc8\x0d\x6a\xaa\x10\x06\xc1\xb7\x7f\xad\x98\x9c\x9e\xf6\x7b\x87\x5e\x38\xd8\xcb\x62\x8a\xe3\x6b\x6e\x9f\x96\xc8\xcb\x5c\xab\x02\xc3\xc0\x8b\x06\xdd\xf7\x2c\x65\x9a\x0f\x7a\xa1\x77\xb8\x8f\xd7\x26\x9f\xb0\xdf\x22\x9f\x0f\xfd\x97\x5d\x38\x7b\x15\x06\x9d\x2e\x9c\x9e\x86\x87\x9d\xee\x92\x62\xe4\x1e\x2f\x4a\xd4\x2c\x8c\x3a\x5d\xa8\xb9\x1e\x75\x36\x89\xa6\x5c\x58\xd4\xc7\x50\x6a\x95\xf1\xe4\xf8\xe4\xd7\xb3\x82\x65\x78\xa9\x99\x34\xa9\xd2\x45\xef\x0d\x8f\xb5\x32\x2a\xb5\xbd\x15\x7f\x63\x99\xb6\x2f\x5d\x4c\x1a\xab\x47\xcf\x97\xdb\x78\xde\x05\x94\xc9\xfa\x74\x45\xf5\x79\x17\x7e\x5a\x2e\xbc\x74\x99\x13\xd6\xb4\xcf\x5e\x1d\x7a\x2f\x20\x65\x42\x38\x4b\x81\x92\x90\x2b\xcd\xef\x94\xb4\x4c\xac\x12\x60\x9d\xeb\xa2\xce\x33\x7f\x99\x68\x43\xbf\x2e\x4b\xc3\x2a\xd3\x62\xc1\x8c\xa9\x8b\x8a\x53\x02\x55\xca\x57\x0b\xe6\x73\xb0\x58\x94\x82\x59\x04\x52\x32\x6d\x39\x13\xa6\x5a\x8b\x9a\x2c\x16\xcf\x96\xb5\x86\x71\x09\x3c\x19\x11\xf7\x40\x40\x2b\x81\xcd\xb3\x65\x63\x2e\x13\xbc\x1d\x11\x2f\x6c\x40\xab\x35\x09\xbf\x69\xf4\x96\x2c\x43\x8f\x4b\xab\xd5\x9a\xdf\x3d\x8f\x19\xab\x99\x20\xf4\x81\xbd\xd7\xd7\x4d\x35\x2b\x4b\xd4\x1b\x12\x9b\x52\xb1\x12\x9e\x93\xdc\x22\xb6\x43\x7c\x8f\x64\x25\x9d\x87\x50\x99\xd1\xed\x51\x67\x5c\x1e\xf7\xa3\xf2\x16\x02\xf7\xfb\x7d\xaa\xa4\xf5\xa6\xc8\xb3\xdc\x1e\x1f\x05\x01\xa1\x1f\x50\xc4\xaa\xa8\x8a\x95\xcd\x11\x2e\xd2\x94\xc7\x08\xa9\xd2\xf0\x0b\x73\x15\x9b\x09\x78\x6f\x99\xe5\xc6\xf2\xd8\x0c\xfd\x3c\xfc\x84\xf2\x72\x43\xb7\x53\x1b\x1e\x3a\xfd\x84\x5e\xe6\x08\x57\xe7\xcf\x0d\x08\xa6\x33\x34\x16\x9c\xe9\x4b\x94\x89\x0b\x86\x52\xab\x64\x12\xa3\x06\x95\x82\x72\x2c\x38\x13\x60\x56\xaa\xab\x2a\xea\x18\x6a\x8c\x55\x26\xb9\xc1\x04\x64\xc3\x70\x25\xc6\x04\x70\x69\x2c\xb7\x13\x8b\x0e\xc8\x56\x1a\x7b\x43\xbf\xdc\x63\x5d\x3f\xe1\x37\x5b\x7c\xf4\xf1\xf4\xc6\xd4\x72\xb8\x35\x66\xd6\x03\x25\x63\x42\xa0\x9e\x3d\x2a\x52\x3e\xa6\x91\x47\xf4\x35\xb3\xce\x5a\xe5\x64\x2c\x78\x5c\xed\xd9\x79\x22\xda\xc2\x79\x22\x1a\x48\xc1\x8d\xf5\x3c\x89\x13\x17\xa4\xd0\x04\x19\xd4\x5e\xf1\x04\xa6\xd6\xf3\x82\x1d\x91\xb4\x3a\x7d\xdf\xae\x69\x5c\x2c\xb6\xca\x0e\x05\x5f\x0b\xcd\x4a\x91\x27\x32\x2f\x7a\xd1\xa8\x1a\x2b\x6b\x55\xe1\x79\x51\x33\xa1\x5d\xf0\x79\x5e\xf8\x20\x99\xa6\x39\xb7\x08\x25\x4b\x12\x2e\x33\xcf\xaa\xd2\x09\x34\xc3\xd5\x8a\x66\xa2\xc1\xbc\x9f\xa9\x37\x14\x42\x8e\xb5\x6c\x74\xb0\x2f\x9f\xf2\x3e\x1d\xb2\x65\xab\xe0\xaa\xca\xd5\xbb\x33\x57\x53\xaa\x02\xe3\xda\x1c\xd7\xef\x30\x3a\xf4\xf3\xfe\x1e\x90\xb2\xd9\xf7\xc6\x46\x83\x1a\xe8\x1d\x0a\x64\x06\x4f\x98\xad\xe0\x76\x04\xe0\xd0\x17\x7c\x97\x13\xaa\xe6\x66\x4b\x5c\x4e\xc4\x8e\x38\xf9\x19\x59\xe2\x4e\x23\x48\x79\x36\xd1\xf8\x27\x05\xc9\x09\xb3\xec\xf3\x82\x23\x3c\x78\x82\x58\x88\x36\x63\x81\xd0\x76\xfc\xbc\x96\xa7\xa6\x64\xfa\xda\x59\xd8\x61\x2c\xb7\xff\xbe\x99\xab\x3a\x53\xe8\xfd\x56\xfd\xad\x7c\xb7\xa3\xb2\xdc\x5b\x10\x7a\x8d\xcb\x4e\x2b\x8f\xf5\xde\x6a\xbc\x92\xdc\x2e\xa1\x36\x5e\xd6\x7f\xb6\xbf\xab\x57\xb5\x14\x62\x8f\x72\x5d\xe5\x97\xa7\x48\xea\xcf\x70\xe4\x6b\xa5\xae\xb9\xcc\xdc\xe1\x95\xa8\xa9\x14\x8a\x25\x60\x79\x81\x60\x50\x73\x34\x3f\xfc\xb1\x2c\xbe\xd4\x33\x50\x13\xbd\x8e\x08\x78\x5b\x0a\xa5\x51\x7f\x66\x42\xef\x49\xda\x53\x64\x76\xa2\x31\x69\x2e\x3f\x4f\x9a\xb4\xff\x4b\xd5\xfa\xea\xdc\xdd\xb8\x4c\x89\xb1\xe5\x37\x68\x20\x0a\xc2\xc3\xfd\x0e\xdf\x9d\x09\x9f\x8c\xf6\xaf\xc8\x2e\xae\x1e\x83\x89\x39\xca\x18\x21\x66\x45\x39\x31\xff\x37\x0b\xa1\x67\x6b\xbd\xa6\xc6\x1b\x8e\x53\xd7\x20\x5e\x9d\x03\xc6\x4a\xaa\x82\xc7\x6b\xcd\xe6\x97\xd8\x6b\x4f\x8a\x5f\xd8\xbc\xea\x6b\x3f\x6a\x6a\xff\x9c\x03\xba\x52\xff\xa5\x65\xfe\x2b\xf2\xf0\xa3\x8f\xf5\x2f\x6d\xba\x1e\xce\x6c\xbb\x0b\xac\x86\x3b\xae\x02\x7f\xe4\xce\x98\x47\xf4\x47\x77\xd2\xfd\xee\xe2\x76\xfd\xc6\x33\x9e\x08\x81\x96\x3f\xe2\x52\xc0\xbc\x3b\xcf\x85\xd4\xa6\x73\x0f\x36\x1c\x11\x6c\xfa\xee\x11\xe7\x49\x83\xed\x71\x8b\x05\xb9\x77\x90\xcf\xac\xba\xfb\x81\xdd\x8d\x18\xa1\x3f\xd6\x7e\x79\x44\xb9\xf9\x24\xda\x98\xd0\xbf\xb7\x87\x16\x13\xfa\xb2\x3d\xb4\x84\xd0\x93\xf6\xd0\x90\xd0\x57\xed\xa1\xa5\x84\x9e\xb6\x87\x96\x11\xfa\x53\x7b\x68\x39\xa1\x3f\xb7\x87\xc6\x09\x3d\x6b\x0f\xed\xdf\x84\xfe\xa3\x3d\xb4\x6b\x42\xcf\xdb\x43\x13\x84\xbe\x6e\x0f\xad\x20\xf4\x4d\x7b\x68\x92\xd0\x5f\xda\x43\x53\x84\x5e\xb4\x87\x56\x12\xfa\xb6\x3d\xb4\xff\x10\xfa\xcf\xf6\xd0\x34\xa1\xef\xda\x43\x33\x84\xbe\x6f\x0f\xcd\x12\x7a\xd9\x1e\xda\x84\xd0\xab\xf6\xd0\x6e\x08\xfd\x57\x7b\x68\x53\x42\x3f\xb4\x87\x76\x4b\xe8\xaf\xed\xa1\xcd\x08\xfd\xad\x3d\xb4\x3b\x42\x7f\xdf\x8d\xf6\x39\xfd\xcf\xb0\xfa\xf7\xda\xea\x03\xfd\x96\xef\xf3\xa9\x52\x76\xf9\x7d\x7e\xe8\x8f\x55\x32\xab\x3e\xf8\x57\xff\x8e\xfc\x6f\x00\x00\x00\xff\xff\x7e\xbe\x5b\x22\x96\x1c\x00\x00")

func templatesHomepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomepageTmpl,
		"templates/homepage.tmpl",
	)
}

func templatesHomepageTmpl() (*asset, error) {
	bytes, err := templatesHomepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/homepage.tmpl", size: 7318, mode: os.FileMode(420), modTime: time.Unix(1476710612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\x9e\x2b\x33\xd8\x00\x3d\x14\xb2\x80\x20\x68\xb6\x8b\x06\xc9\x21\x5b\xf4\x68\x8c\xc9\x91\x34\x35\x35\x14\xc8\x91\x14\xf7\xeb\x0b\x5a\xf1\x3a\xad\xbd\xe8\xc6\xd9\xf6\x62\xcb\x33\x7c\x6f\xc6\x7c\x8f\x43\x95\x75\x08\x82\x51\x59\x0f\x29\xad\x74\x1f\x89\xa5\x28\x5a\x72\xa8\xab\x45\xd9\x7e\x38\x24\x46\x4a\x03\x78\xbf\x6b\xc9\x39\x64\x5d\xdd\xcd\x30\x4f\xbc\x4d\xa5\x69\x3f\x54\x8b\xd2\xd1\x78\x58\x3d\x93\xea\xbf\x07\xa7\x08\x7d\x3f\x47\x19\xc6\x73\x80\x82\x61\x54\x36\xf8\x22\x2f\xfd\x07\xda\x06\xbf\x4f\x15\xbe\x29\x02\x63\x21\x2d\x45\x37\x47\x3a\x77\x8c\xec\xbb\xbe\x3e\xa5\x5d\xaf\x5b\x04\x47\xdc\xe8\xea\x17\xf4\x7d\x69\xda\xeb\x6a\x51\x0e\xfe\xdc\x4a\x4f\x49\x32\x8f\xa7\x73\x59\x12\xec\x72\x16\x54\x1b\xb1\x5e\x69\xd3\xa2\xef\x0d\x58\x8b\x29\xd1\x86\x3c\xc9\x4e\x57\x37\xaf\x7f\x96\x06\xaa\x45\x69\x3c\xbd\x91\xd3\x86\xb0\x25\x4c\xc0\xae\x8f\x34\x82\xdd\xe9\xea\x76\x0e\x29\x60\xa7\x5e\x82\x97\xb2\x0b\xc6\x2e\x73\xdb\xc0\x8e\x84\x02\x27\x5d\x7d\xce\xb1\x3d\xf9\x31\xfa\x9a\xdf\x0c\x3e\x7f\x3a\x1a\xff\x2b\x71\x6e\x36\x61\x10\xf5\xf8\xf0\xf4\x3d\x15\x82\x4c\x3a\x24\x33\xb5\x20\x13\xba\xa0\xab\xdf\x5b\x10\x35\xa1\x72\xe1\x82\xed\x3b\xd0\x59\x88\x88\x31\xe9\xea\x76\x7e\x78\x0f\x55\x60\x01\x2b\x43\x26\x9b\x1f\xd5\x70\x09\x1f\xe3\x94\x74\xf5\x80\xd3\x7b\x9a\x91\x08\x9c\x7a\x88\xc8\x76\x07\xec\x9a\x30\x62\x64\x60\x8b\xa6\x8e\x88\x2e\x74\xa1\x26\xae\x43\xec\x20\x1b\xa4\x0e\xa4\xab\xbb\x39\xa1\x42\xad\x3e\x1d\x53\xff\xaf\x75\x6e\x03\x33\x5a\x51\x13\x49\xbb\xdf\xbd\xef\x66\xa0\x56\xa4\x4f\x3f\x19\x23\x13\x89\x60\x5c\xda\xd0\x99\xc7\x87\x27\x7d\xc0\x92\x0d\xfc\x32\x34\x95\x40\x6c\x50\x56\x7a\xbd\xf1\xc0\x5b\x5d\x7d\x9e\x31\x6f\x97\xe3\x50\x74\x9a\xa6\x65\x0d\x16\x37\x21\x6c\xdf\x54\xf9\xee\x05\xf4\xbe\xd2\x79\xc2\xa3\x23\xde\x97\xb6\xa1\xeb\x81\x77\x26\xd4\x35\x59\x2c\xea\x90\x09\xb2\xd2\xe0\x8b\x24\x20\x94\x84\x6c\xfa\xa6\xee\xee\xf7\xbc\x9f\xf8\xf2\xee\xfa\x61\xe3\xc9\x2e\x9b\x30\x3a\xf4\x34\x62\xdc\xed\x7b\x04\x6b\xc3\xc0\x92\xcc\x6f\xbf\x3e\x3e\x3c\x99\x34\x6c\x92\x8d\xb4\xc1\x98\xf2\xe9\xf8\xa6\xde\x7e\xee\x80\xbc\x02\x8f\x51\xbe\x3e\xfe\x0e\x5f\xf3\x5d\x76\x6a\xec\x57\xd7\xdd\xe9\x45\xe7\xc9\x22\xa7\xfd\x1d\x4b\x5d\x73\x3e\xb9\x5e\x53\xd7\x68\x05\x5e\x56\xfa\xf1\xe3\xbd\x56\x13\x39\x69\x57\xfa\xc7\x2b\xad\x52\xb4\x2b\x6d\xa8\x6b\x4c\x68\xfc\xb2\xcf\xf6\x5f\x94\xfd\xd7\x78\x04\x9f\x45\x75\x10\x1b\xe2\xc2\x63\x2d\x45\xea\x8a\xe2\x4a\x57\x8b\x1b\x9f\x0f\x1f\x0b\xb2\x28\x4a\x0a\x46\x20\x0f\x1b\x8f\x6a\x60\x87\x51\x49\x8b\xaa\x84\x73\x3b\x76\x54\xe2\xc5\x26\x07\x1b\x40\xb4\x2d\x8d\x98\xb2\x2c\xcb\x61\x6b\x5c\xb0\x26\xf4\xc8\xc5\x3c\x45\x3a\x64\x99\xfb\xb2\x68\x46\x8c\x89\x02\x9b\x6b\x73\x2a\xc1\x63\x8f\xac\x3e\x7e\xc1\xa8\xfb\x19\xa3\xc6\xeb\xe5\x55\x96\x44\x95\xa9\x07\x7e\xdd\x9a\xda\xf7\x87\xcf\x92\x87\x55\x9e\x27\xd4\xb4\xf9\x9f\x82\xf7\xba\x2a\x4d\x5e\x5e\xfd\xa0\xf0\xd9\x62\x2f\x6a\x6a\x31\xa2\x0a\xd2\x62\x9c\x28\xa1\xca\xe6\x45\xb7\x28\x4d\x7f\x2a\xf0\x51\x59\x72\xf9\x45\x08\xa7\x3e\xc4\xcc\xfc\xc5\x4b\x7f\xa4\xe2\x18\xa6\x3f\x31\xd7\xcb\xa8\x53\x50\xe7\x2e\x00\xf9\xe6\xdf\x41\x66\xd6\xbc\x5a\xfc\x15\x00\x00\xff\xff\xc2\xab\x14\xfd\xd1\x09\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2513, mode: os.FileMode(420), modTime: time.Unix(1476699305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x20\x78\x40\xb1\x01\x56\xeb\x6c\x52\xf4\xcf\x9d\xad\x22\xd9\x04\x49\x80\xbb\xeb\x22\x09\xae\xe8\xd3\x62\x4c\x8e\x25\xae\x29\x52\x25\x29\x3b\xfe\xf6\x05\x49\x51\x92\x25\x3b\x39\x14\xe8\xad\x1e\xf2\x90\xac\x34\xbf\x21\xe7\x37\xc3\x21\x39\x32\xb9\x2a\x11\x38\x9a\x7c\xb1\x02\xc2\x24\x58\xbb\xa6\x76\x27\x6a\x29\xd4\x8e\x92\xd2\xe0\x76\x4d\x7f\xa8\x40\x28\x4a\x1c\x6c\x84\xe2\xf8\x65\x4d\x9f\xd3\x7c\xf1\x69\x27\x6a\xe2\x34\xf1\x18\x61\x5a\x39\x54\x6e\xb1\x5a\x42\xbe\x58\x71\xb1\x27\x82\xaf\x69\x0d\x05\xde\x83\x2b\x69\xea\xb8\x14\x1c\x69\xbe\x5c\x2d\xb9\xd8\xb7\x7a\x2d\xb2\x41\x07\xd9\x06\x94\x42\x43\x4f\x91\x83\x81\xba\x8e\xd2\xb6\xd9\xb4\xf5\x40\x67\x20\x8d\x8e\x11\xa6\x65\xe6\x15\x46\x28\xd3\x32\x40\x99\x2c\x32\xad\x30\x73\xa5\x30\x3c\x4a\x2a\xde\x4b\x68\x08\x4c\x8c\xc3\xd2\xbf\x88\xaa\x48\x5d\x78\xd7\x33\xa9\x0b\x4d\x89\x35\x6c\x4d\x97\x60\x2d\x3a\xbb\x14\x55\xb1\xd4\xca\x06\xe8\xc6\xee\x0b\x4a\x40\xba\x35\xfd\xe7\x76\x2b\x18\x92\xad\x36\xe4\x57\x70\x42\x2b\x90\xe4\x93\x03\x27\xac\x13\xcc\x06\x07\xe1\xac\x7b\x43\xaa\xee\xa0\x23\x31\xdb\x71\x1d\x88\x7c\x80\xb3\xcc\x56\xa4\x36\x42\xb9\x2c\xf3\xef\x44\x82\x2a\x1a\x28\x30\xcb\x1e\xed\xc3\x83\x1f\x2a\x10\x29\xce\x32\xd9\x48\x4a\xe4\xd1\xc6\x66\x94\x58\x77\x94\xb8\xa6\x5c\xd8\x5a\xc2\xf1\x47\xa2\xb4\xc2\x9f\x42\x2b\x37\x6e\xf5\xf0\xe0\x84\x93\x48\xf3\x9f\x5b\xc1\x8f\xab\x25\x77\x5e\x95\x4f\x55\x85\xc3\x6a\x18\xd6\x3f\xfd\x70\xfb\xfc\xa7\xd1\x7f\x84\x10\xb2\x5c\xb2\xe3\x8d\x56\xf6\xa6\xd0\xfb\x9b\x66\xb7\x0c\x00\x9d\xf6\xe7\x53\x95\x08\xa6\x55\x4b\x3c\xbf\x3b\x56\x06\xb0\x20\x57\x77\xff\x7e\x96\x62\xca\xc3\xff\x32\x5f\xac\xb6\xda\x54\x13\xaf\x87\x31\x0a\x21\xb0\xa5\x3e\x4c\x43\xb0\x91\x9a\xed\x42\x0c\x24\x6c\x70\x12\xbc\x18\xe1\x00\x51\x3f\xce\x11\x39\x89\x4a\x00\xf3\xc5\xca\xa2\x44\x36\x89\x63\xec\x20\x62\x34\xcc\xa1\xd0\x01\x51\x50\x61\xea\x6c\xb1\xd2\xb5\xcf\x1e\xb2\x07\xd9\xe0\x9a\xa2\x2a\xa4\xb0\x25\x25\x1c\x1c\x64\x8d\x91\x6b\xba\x58\xc4\xf8\x1d\x0e\x87\x1b\xff\x6f\x10\xc4\xc5\x62\x41\x49\x34\x80\x7c\x4d\xd3\x13\xcd\xdf\xc6\x6e\xc8\xd5\xdb\x5f\x9f\xad\x96\xd1\xc4\xc4\xd6\x01\xe5\xd8\x52\xb2\x75\x3a\x56\x8b\xf1\x28\x74\x1d\x2e\xa3\x49\xff\xe4\x47\xe2\x6c\xc2\x5b\x64\x5a\x71\x30\xc7\x4c\xc1\x9e\xfc\xfe\xf4\x1f\x64\xbd\x8f\x53\x23\xcf\x76\xe8\x33\xc6\x3a\x3f\xca\x0a\xf6\x19\x93\x5a\x61\x14\x85\x71\x15\x17\xda\xf4\x59\x7b\xa9\x4f\xb5\x23\x93\x4e\xfb\x45\x74\x69\x50\x22\x58\x64\x20\xd1\x37\xa3\xf9\xc7\x28\x20\x49\xd2\xa6\xaa\x14\xff\x57\x1a\x15\xba\x52\x73\x2d\x75\x71\xa4\xf9\x2f\xfd\xcb\x1f\x63\x5d\xe1\xc1\x7a\xb3\x5c\xc0\x1f\x63\x10\x36\xba\x71\x8d\xa5\xf9\x2b\xff\x30\xb4\xb9\x6c\xe4\x64\x4f\x99\xa6\x62\x6d\x44\x95\x12\x71\x94\x5e\x0a\xf6\x27\x49\xe6\x29\x64\x7e\x79\x35\x5a\xda\xd3\x5c\x3a\x81\xa6\x2b\xe0\x0f\x1e\x6f\x2d\xc5\x69\x5f\xa1\x6a\x32\xa7\x8b\x42\x22\x25\x60\x04\x74\xad\x63\x67\x9d\xf2\x79\x03\xbe\xb9\x37\x60\x6b\x50\x17\x54\x1c\x7e\x71\x7e\x24\x54\xb3\x5a\x7a\xb5\x6e\xfb\x19\x0d\xc8\x19\xea\x64\xc2\xdd\x22\x18\x56\x46\xea\xf1\xf9\x6b\xe4\x93\xf6\x79\x0b\x2d\xfa\x7b\xd8\x7f\x0a\xaa\xe7\xf8\xc7\xc1\x9d\x96\x08\xc4\xf7\x13\xf6\x6d\x3f\x8c\x1c\x55\xe4\x7c\x12\xd2\xc0\x18\xbf\xd4\xa0\xb8\x5f\x22\xb7\x20\xed\x68\x39\x19\x24\xc5\xb9\x95\xe3\x04\x0e\x01\x9b\x48\xb2\x0c\x98\x13\x7b\x6c\x53\xb7\xdf\xb8\xb5\xe4\x99\xc0\x2c\x6b\xb7\x9c\x2c\xec\x38\x34\xef\x27\xc0\xc8\xb6\xda\xf5\xeb\x63\xc5\xb3\xbf\x76\x2b\xe5\xdf\x69\x5f\xb5\xbc\xd7\x15\xfa\xe8\x4c\x06\x77\xca\xb4\xe5\xf3\x68\xdb\x08\xc0\x46\xe2\xc9\x04\xfc\xba\xfd\xbf\x75\xf6\x6f\x9f\x77\x04\x36\x8d\x15\x0a\xad\x15\x8a\x37\xd6\x99\x23\x28\xee\x0c\xf0\x94\x1c\x25\xd8\x5a\xd7\x4d\xbd\xa6\xce\x34\x48\xf3\xd7\xad\xfa\x35\x49\x0d\x08\x28\x4e\x42\x93\x38\xc6\x17\x46\x82\x95\x42\xf2\x2c\x2c\xee\x43\x4e\xb7\x7f\xe9\x48\xbd\x78\x7e\xea\x59\x2c\x87\x50\x75\xbb\x41\x4c\x0a\xf2\x68\xdf\xaa\x12\x14\xc3\x0b\xd9\x10\xa5\x61\x2f\x5f\x53\xdb\x6c\xd2\x7c\xbb\x10\xd9\x48\x2c\xc4\x77\x62\xdf\x43\x97\x03\x9c\x5c\xf2\x2b\x5a\x5f\x7f\x67\xb7\xdf\x8c\x6d\x07\xf4\xf1\x3c\x3f\xbf\x9f\x9c\x28\x2b\x41\x15\x68\x9d\xee\x19\xdf\x45\x91\xff\xbc\xd8\xcc\x9c\xbc\x56\xd6\x99\x86\xf9\xe2\x26\x81\x34\xbf\x1b\x48\xbb\x24\x9e\xa9\x07\xc2\x81\xe2\x42\x39\x34\x0a\x5d\xef\xc2\x87\xcf\x61\xd2\x25\x60\xf6\x5e\x04\x9e\xed\x57\x55\x5c\x5c\xf2\x0f\x43\xd9\x70\xf9\x98\x1d\xfb\x0a\x54\xb3\x05\xe6\x1a\x23\x54\x01\x8a\xd7\x46\xf3\x71\x4e\xfd\x32\xd4\x09\x63\xd3\x6b\xcd\x7d\x74\x0c\x3a\x10\xb2\xf7\xe5\x63\x78\x9f\x3b\x6b\xa7\x1b\x23\x6c\xd5\xd3\xfe\x1c\x05\x67\x79\xb7\xd5\xe4\x93\xec\xaf\xbe\x24\xd6\xd5\xf1\xc2\x76\xfa\x36\xa2\xdf\x77\xce\xd1\xb8\xb7\x51\x6b\xff\x0a\xa6\x1b\x57\x37\x6e\x30\xfb\xf6\xc2\x1d\x53\xf8\x04\x23\x11\x3f\x99\x79\x5e\xe3\x69\x93\xb7\x73\x42\xed\x85\xd1\xaa\x42\xe5\x40\x02\x63\xba\x51\xce\xfa\x8f\xfa\x81\x98\x24\xf9\x3c\x28\x17\x7a\x8f\x26\x50\xab\x9b\x8d\x14\xcc\x22\x73\xda\xf8\xd9\x07\x5f\xd0\xd2\xfc\x5d\x87\x5f\x93\xa8\x41\xa2\x4a\xac\x06\xbd\xd2\x4c\x1c\x31\xda\x5a\xae\x2b\xb4\x4e\xb0\x36\x35\x0a\x5e\xd3\xfc\x9d\x07\xc8\x9b\x16\x21\xf7\x11\x22\x57\xef\xde\xdc\x3f\x9b\x11\xf5\xf0\xdb\x0e\x70\x8e\xbc\xd8\x43\x62\xfd\x9b\x17\x92\x57\x5e\x4a\xae\xde\xfd\xf6\x6a\x26\x84\x85\xda\xca\xb8\xa3\xfb\x79\x2a\x18\x0a\xc5\x05\xf3\xe9\xf2\x21\x21\xed\x0c\x15\x0c\x49\x0b\xce\x85\xfa\x1e\xad\xf3\xf9\x6c\x6b\x54\x56\x68\x65\xc3\x56\xd3\x58\x17\xe8\x77\xe8\x35\x49\x78\xfb\xdd\xe3\x35\xe6\xe1\x43\xaa\xa6\xfa\x15\xa6\xfb\x25\x7b\x5e\x8b\x8b\xc1\x62\x44\xf4\x63\x2b\x39\x4b\xf4\x49\x77\xef\xaa\x96\xfa\x18\x96\x68\xc5\x25\x6c\x74\x63\x2a\x30\x3b\x74\x97\xf6\xf3\x4e\x3f\xa4\x47\x6c\x41\x62\x93\xef\x9b\xfc\x38\x1f\x2e\x05\x77\x59\xa3\xae\x25\x0a\x75\xd0\x66\x47\xf3\xfb\xf0\x46\x84\x22\xfe\xfd\x89\x73\xf8\x1b\x9c\x95\x76\x23\xda\x4a\xbb\x73\xd4\x9f\x32\xab\x23\x55\x9f\xb8\xdd\x7a\xcd\x74\x55\x35\xca\x17\x55\xe7\x13\x3b\x3a\x73\x4d\xfa\x46\x21\xc1\xbb\x66\xdf\x93\x7b\x94\x28\x5f\x8b\xf1\x72\x23\x8c\x2b\x2d\x47\x70\xa5\xdf\x67\x2a\x30\x46\x40\xe1\x77\xca\xd7\x01\xb9\x26\x11\x0b\x31\xee\xd0\xa7\xcd\xfc\xaf\x3a\xc4\x8c\xa8\x10\x14\x7f\x6c\x7c\x35\x85\x34\xbf\xf3\x82\x40\xbf\x15\xcd\x99\x7c\x23\x5d\x63\x40\x0a\x8e\xca\x85\xef\x8a\xbb\x56\x42\x92\x68\xc6\xec\x91\x37\xac\x93\xfa\x9e\x18\x18\xbf\x13\x25\x71\x9c\xa7\x09\x98\xb3\x23\x12\xc3\x0f\x26\xfe\xd3\x28\x3d\xce\x98\x6e\x89\x20\x5d\x09\x8a\x5b\xcd\x04\xc8\x18\xf5\xf7\x41\x18\x42\x1e\xc5\x64\xe6\x41\x2f\x75\x63\xb1\xd4\x92\xb3\x12\x0c\x30\x87\x26\xdd\x78\x78\x9f\x10\x32\x82\x66\xee\x8d\x50\x45\x24\x2f\x54\x31\x63\xaa\x12\x85\x6d\x8c\x5f\x33\xdb\x9f\xb2\x68\xfe\x73\x14\xc5\x0f\x8b\x28\x9c\xb1\x03\x35\x1a\x1b\xaa\x78\xc5\xbb\x24\xda\x0a\xe5\x37\x67\xeb\xeb\x85\x88\x06\x67\x3a\x9c\x24\x85\x39\xfb\x35\x14\x57\xa2\x30\xe1\x99\xe6\xf7\xa7\x95\x4f\x87\xcc\xd8\x95\x03\x4a\xb9\xc1\x30\x21\xfe\x85\x52\x66\xe1\xf9\x7f\x29\x42\xdb\x2a\xec\x1b\x75\xe7\xb7\x0b\x4f\xdb\x98\x3d\x1e\x2d\xcd\x17\x9f\x61\x27\x54\x41\x6a\x30\xa1\x3a\x06\x12\xa1\x7f\x9c\x39\x28\x4e\xc7\xff\xf1\x48\xff\xdc\x85\x14\x30\xac\x24\xfd\xe1\x75\x3a\x3e\x3e\xb9\x13\x30\x38\xfe\x7e\x0d\x97\xee\xb1\x11\xa3\x25\x26\x35\x3a\xba\x8f\x94\xee\xaa\x91\x08\x3f\x3c\x78\x90\x12\x08\x3b\x95\x77\xae\x6b\x75\x72\xff\x28\x69\xb7\xc2\x41\x88\x5e\xbc\xec\xeb\xdf\x3f\xb7\x77\x92\x06\x47\xf0\xed\x09\x7a\xb8\x93\x06\x64\x87\xc7\x83\x36\xfc\xca\x3e\x23\xda\x10\xe7\xab\x2b\x8b\x46\xa0\x25\x1f\xde\xf4\x37\x97\x84\xaa\x1b\x47\xdc\xb1\xee\xbd\x20\xd0\x38\xcd\x74\x55\x4b\x74\xb8\xa6\x7a\xbb\xa5\x63\x6a\xb1\xd5\x09\xb5\xdb\x8e\xda\xcb\x17\xfd\x31\x7c\xea\x32\x5e\x79\xfa\x0f\x4d\x57\x8f\xbc\xd3\x9b\xc6\x39\xad\x92\xed\x66\x53\x09\x37\x31\xd4\xea\x24\x2b\xbd\xff\x2f\xc7\x36\xb2\xb6\x87\xd1\x4d\x83\xbd\xb0\x0d\x48\x79\x6c\xef\x07\x8c\x2f\x19\x0c\x55\x05\xd3\x2a\xde\x3c\x4b\x59\x21\x45\x51\x3a\x9a\xf7\x57\x12\x22\x9d\xe9\x6d\xa7\xf4\x27\xdd\xbe\xfc\x6f\x00\x00\x00\xff\xff\x2c\x5c\xd9\x25\x87\x29\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 10631, mode: os.FileMode(420), modTime: time.Unix(1476699962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/homepage.tmpl": templatesHomepageTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"homepage.tmpl": &bintree{templatesHomepageTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

