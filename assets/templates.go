// Code generated by go-bindata.
// sources:
// templates/homepage.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHomepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xd3\x41\x6b\xdb\x30\x14\x07\xf0\xfb\x3e\xc5\x83\x52\xb2\xd5\xb2\x65\xd9\xb1\xb3\x66\x6e\x2e\x59\xb3\xe5\x50\x3a\x58\x61\xbb\x2a\xf6\x93\x2d\x22\x5b\x41\x52\x29\x49\xc8\x77\x1f\x8e\x9c\x2c\x6c\x04\x76\xd8\x4d\x7f\xeb\x49\xfc\x30\xfa\x17\x8d\x6b\xd5\xec\x1d\x40\xd1\x20\xaf\xfa\x05\x40\xe1\xa4\x53\x38\xfb\xaa\x5b\xdc\xf0\x1a\x0b\xea\xb3\xdf\xb3\x6e\x7b\x5a\x03\xac\x74\xb5\x85\xfd\x10\x00\xe8\x1d\x7c\x43\xd3\x72\x25\xbb\x35\x84\xf0\x6a\x11\x9c\x06\xac\xa4\x03\xde\x55\x60\x1b\x6e\x10\x5c\x23\x2d\xd4\x86\x57\x12\x3b\x37\x85\xc6\xb9\xcd\x94\xd2\x52\x2b\x6d\x76\x52\x29\x1e\x95\xba\xa5\xa7\xfd\xb0\x3f\xac\x0d\xbd\x41\x14\x22\xcd\x82\x98\x08\x96\x8b\xac\x0c\xb2\x98\x88\x3c\xb9\x8f\xcb\x20\x63\x84\xa5\x25\x1b\x8f\x83\x49\x42\x70\x92\x7e\x4c\x26\x01\x8b\x63\xb8\xa3\x67\xd7\x8a\x97\xeb\xda\xe8\xd7\xae\x9a\xc2\x70\xd3\xa7\x1e\xfb\xac\x2a\x58\x19\xfd\x66\xd1\xd8\x6b\xf3\x61\xab\x77\xa1\x92\x1d\x72\x13\x9e\x54\xef\xc3\x71\x56\x61\x4d\xe0\x74\x1b\xc4\xb7\x04\x6e\x3c\x0d\x32\x1f\x8e\x3a\xc8\x58\x1f\x3c\x10\x26\x49\x1f\xbc\x11\x58\x1c\xdf\x7e\x38\x32\x16\x8b\x34\xca\x43\x96\x5d\x25\xbc\xe1\x6a\x2d\xdd\x3f\x29\x2e\x11\x97\x86\x4b\xc2\xdf\x82\x79\x63\x74\x8b\x2c\x0e\x93\x8c\x7c\xe7\x82\x1b\x99\x45\x2c\xcc\xaf\x81\xfe\x84\xb0\xf4\x7f\x41\x7e\xa4\x73\x02\xcb\x47\x16\x07\x04\x16\x0b\x96\x07\x64\xb0\x25\xfd\xf2\x79\x83\x86\xb3\x24\x20\xe0\x91\x93\xe0\x52\x28\xa4\x72\x68\xa6\xb0\x31\xba\x96\xd5\xf4\xf3\xcf\x65\xcb\x6b\x7c\x31\xbc\xb3\x42\x9b\x36\x7a\x92\xa5\xd1\x56\x0b\x17\x9d\xe1\x60\x1d\x37\x6e\xde\xbf\x3d\xeb\xcc\xc3\x68\xf0\x8f\x08\x60\x57\x5d\x7e\x3e\x3a\x47\xe4\xcb\x70\xf0\x65\xbb\xc1\x07\x06\xde\xbc\x7c\xcc\xc3\x7b\x10\x5c\xa9\xfe\x1f\x81\xee\xa0\xd1\x46\xee\x74\xe7\xb8\x3a\x3f\xf4\xdf\xd0\x83\xef\x11\x3d\x17\xa9\xa0\xa7\xea\x15\x7d\x9f\x86\x9e\x35\x6c\xb6\xdf\x43\xf4\x84\xd6\xf2\x1a\xe1\x70\x28\x68\xc3\xfc\xb8\x9f\x2a\xa8\xaf\xee\xaf\x00\x00\x00\xff\xff\x2d\xc5\xa0\xc4\xc2\x03\x00\x00")

func templatesHomepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomepageTmpl,
		"templates/homepage.tmpl",
	)
}

func templatesHomepageTmpl() (*asset, error) {
	bytes, err := templatesHomepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/homepage.tmpl", size: 962, mode: os.FileMode(420), modTime: time.Unix(1476359024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/homepage.tmpl": templatesHomepageTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"homepage.tmpl": &bintree{templatesHomepageTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

